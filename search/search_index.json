{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agent MCP Toolkit","text":"<p>Agent MCP Toolkit is a Python package that provides a set of tools and services for integrating Model Context Protocol (MCP) with agent frameworks.</p>"},{"location":"#overview","title":"Overview","text":"<p>This toolkit offers:</p> <ol> <li>MCP Client Service: For connecting to and interacting with MCP servers</li> <li>MCP Server Service: For managing MCP server instances</li> <li>LangChain Tools: Ready-to-use tools for LangChain that leverage MCP capabilities</li> <li>Tool Factory: For easily creating MCP-powered tools</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check the Installation guide to get started with Agent MCP Toolkit.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>API Reference: Detailed documentation of the toolkit's components</li> <li>Examples: Example usage scenarios</li> <li>Contributing: Guidelines for contributing to the project</li> <li>Changelog: Version update history </li> </ul>"},{"location":"examples/","title":"Usage Examples","text":"<p>This project contains complete example code located in the <code>examples</code> directory:</p>"},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<p>The <code>examples/basic_usage.py</code> file demonstrates the basic functionality of Agent MCP Toolkit, including:</p> <ul> <li>Creating server and client tools</li> <li>Initializing MCPToolkit in different modes</li> <li>Integrating tools with LangChain and LangGraph</li> <li>Creating and using Agents</li> </ul> <p>Example code snippet:</p> <pre><code>from langchain.chat_models import ChatOpenAI\nfrom langgraph.prebuilt import create_react_agent\nfrom langchain_mcp_toolkit import MCPToolkit\n\n# Create toolkit\ntoolkit = MCPToolkit(mode=\"client_and_server\")\n\n# Get all tools\ntools = toolkit.get_tools()\n\n# Create Agent\nmodel = ChatOpenAI(model=\"gpt-3.5-turbo\")\nagent = create_react_agent(model, tools)\n\n# Execute Agent\nmessages = [HumanMessage(content=prompt)]\nresponse = await agent.ainvoke({\"messages\": messages})\n</code></pre> <p>View the complete basic usage example for more details.</p>"},{"location":"examples/#custom-tools","title":"Custom Tools","text":"<p>The <code>examples/custom_tools.py</code> file demonstrates how to create custom tools and add them to an MCP server:</p> <ul> <li>Defining custom tool functions</li> <li>Adding tools to the server</li> <li>Calling tools from the client</li> <li>Creating Agents that use custom tools</li> </ul> <p>Example code snippet:</p> <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Start server\ntoolkit = MCPToolkit(mode=\"server\")\nserver_service = toolkit.get_server_service()\nawait server_service.async_start_server()\n\n# Add custom tool\ncalc_code = \"\"\"\nexpression = kwargs.get(\"expression\", \"\")\ntry:\n    allowed_chars = set(\"0123456789+-*/() .\")\n    if any(c not in allowed_chars for c in expression):\n        return \"Error: Expression contains disallowed characters\"\n\n    result = eval(expression)\n    return f\"Calculation result: {result}\"\nexcept Exception as e:\n    return f\"Calculation error: {str(e)}\"\n\"\"\"\nawait server_service.add_tool(\"calculator\", \"Simple calculator\", calc_code)\n\n# Client tool call\nclient_toolkit = MCPToolkit(mode=\"client\")\nclient_service = client_toolkit.get_client_service()\nserver_url = await server_service.async_get_url()\nawait client_service.create(\"default\", {\"url\": f\"{server_url}/sse\", \"transport\": \"sse\"})\ncalc_result = await client_service.call_tool(\"calculator\", {\"expression\": \"2 * (3 + 4) - 5\"})\n</code></pre> <p>View the complete custom tools example for more details. </p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>pip (Python package manager)</li> </ul>"},{"location":"installation/#installation-from-pypi","title":"Installation from PyPI","text":"<p>The simplest way to install the MCP Toolkit is via pip:</p> <pre><code>pip install agent-mcp-toolkit\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For development purposes, you can install the package from source:</p> <pre><code># Clone the repository\ngit clone https://github.com/ACNet-AI/agent-mcp-toolkit.git\ncd agent-mcp-toolkit\n\n# Install in development mode\npip install -e \".[dev,test]\"\n</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>MCP Toolkit depends on the following packages:</p> <ul> <li>mcp[cli,rich]&gt;=1.4.1,&lt;1.5.0</li> <li>langchain-mcp-adapters&gt;=0.0.5</li> <li>langchain&gt;=0.3.20</li> <li>langgraph&gt;=0.1.16</li> <li>pydantic&gt;=2.8.0,&lt;3.0.0</li> <li>anyio&gt;=4.7.0</li> </ul> <p>These dependencies will be automatically installed when you install the package. </p>"},{"location":"api/client_service/","title":"MCPClientService","text":"<p>MCP client service</p> <p>Provides MCP client functionality for applications, supporting SSE and stdio transport.</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>class MCPClientService:\n    \"\"\"MCP client service\n\n    Provides MCP client functionality for applications, supporting SSE and stdio transport.\n    \"\"\"\n\n    def __init__(self, verbose: bool = False) -&gt; None:\n        \"\"\"Initialize MCP client service\n\n        Args:\n            verbose: Whether to enable detailed logging\n        \"\"\"\n        self.client: Any = None\n        self._is_connected: bool = False\n        self._is_multi_client: bool = False\n        self._verbose: bool = verbose\n\n    @property\n    def is_connected(self) -&gt; bool:\n        \"\"\"Get connection status\"\"\"\n        return self._is_connected\n\n    @is_connected.setter\n    def is_connected(self, value: bool) -&gt; None:\n        \"\"\"Set connection status (for testing only)\"\"\"\n        self._is_connected = value\n\n    def _check_connection(self) -&gt; None:\n        \"\"\"Check connection status\n\n        If client is not connected, raise ValueError\n        \"\"\"\n        if not self._is_connected:\n            raise ValueError(\"Client service not connected\")\n\n    def _create_multi_server_client(\n        self, server_configs: dict[str, dict[str, Any]]\n    ) -&gt; Any:\n        \"\"\"Create multi-server client\n\n        Args:\n            server_configs: Server configuration dictionary, format: {\n                \"server_name\": {\n                    \"url\": \"http://localhost:8000/sse\",  # SSE connection\n                    \"transport\": \"sse\"\n                },\n                \"server_name2\": {\n                    \"command\": \"python\",  # STDIO connection\n                    \"args\": [\"path/to/server.py\"],\n                    \"transport\": \"stdio\"\n                }\n            }\n\n        Returns:\n            Any: Multi-server client instance\n        \"\"\"\n        try:\n            from langchain_mcp_toolkit.services.adapters import MCPAdapterService\n\n            return MCPAdapterService.create_multi_server_client_sync(server_configs)\n        except Exception as e:\n            raise ValueError(f\"Failed to create multi-server client: {e}\") from e\n\n    def create(\n        self,\n        url_or_configs: str | dict[str, dict[str, Any]],\n        transport_type: str = \"sse\",\n        command: str | None = None,\n        args: list[str] | None = None,\n        output_stream: Any | None = None,\n    ) -&gt; str:\n        \"\"\"Create MCP client\n\n        Args:\n            url_or_configs: Server URL or multi-server configuration dictionary\n            transport_type: Transport type, optional values are \"sse\" or \"stdio\", default is \"sse\"\n            command: Command, valid when transport_type is \"stdio\", default is \"python\"\n            args: Command arguments, valid when transport_type is \"stdio\", default is []\n            output_stream: Output stream, for receiving server response\n\n        Returns:\n            str: Operation result information\n        \"\"\"\n        if self._is_connected:\n            raise ValueError(\"Client service already connected\")\n\n        # Handle output stream\n        if output_stream is None:\n            output_stream = NullOutputStream()\n\n        # Check if it's multi-server configuration\n        if isinstance(url_or_configs, dict):\n            try:\n                self.client = self._create_multi_server_client(url_or_configs)\n                self._is_multi_client = True\n                self._is_connected = True\n                return \"Multi-server client created\"\n            except Exception as e:\n                raise ValueError(f\"Failed to create multi-server client: {e}\") from e\n\n        # Handle single-server configuration\n        url = url_or_configs\n\n        if transport_type == \"sse\":\n            try:\n                if ClientSession is None:\n                    raise ImportError(\"ClientSession not defined\")\n                # Type annotation issue: here we use type conversion to explicitly tell mypy this is acceptable\n                # Actually, this part of the code should be refactored, but for now, ensure type check passes\n                self.client = cast(\n                    Any,\n                    ClientSession(\n                        cast(Any, url), write_stream=cast(Any, output_stream)\n                    ),\n                )\n                self._is_connected = True\n                self._is_multi_client = False\n                return f\"Client created connected to {url}\"\n            except Exception as e:\n                raise ValueError(f\"Failed to create SSE client: {e}\") from e\n        elif transport_type == \"stdio\":\n            try:\n                if StdioServerParameters is None or stdio_client is None:\n                    raise ImportError(\"StdioServerParameters or stdio_client not defined\")\n\n                cmd = command or \"python\"\n                cmd_args = args or [url]\n\n                params = StdioServerParameters(command=cmd, args=cmd_args)\n                self.client = stdio_client(params)\n                self._is_connected = True\n                self._is_multi_client = False\n                return f\"Client created connected to {url}\"\n            except Exception as e:\n                raise ValueError(f\"Failed to create stdio client: {e}\") from e\n        else:\n            raise ValueError(f\"Unsupported transport type: {transport_type}\")\n\n    async def connect(self) -&gt; str:\n        \"\"\"Connect to server\n\n        Connect to MCP server. Should be called after create method.\n\n        Returns:\n            str: Operation result information\n\n        Raises:\n            ValueError: If client is not created\n        \"\"\"\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        # Get client instance\n        client = self.client\n\n        # Connect to server\n        await client.connect()\n\n        self._is_connected = True\n        return \"Connection successful\"\n\n    async def disconnect(self) -&gt; str:\n        \"\"\"Disconnect\n\n        Disconnect from MCP server.\n\n        Returns:\n            str: Operation result information\n\n        Raises:\n            ValueError: If client is not created\n        \"\"\"\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        # Get client instance\n        client = self.client\n\n        # Disconnect\n        await client.disconnect()\n\n        self._is_connected = False\n        return \"Disconnected\"\n\n    async def call_tool(self, server_name: str, tool_name: str, **kwargs: Any) -&gt; Any:\n        \"\"\"Call tool\n\n        Args:\n            server_name: Server name\n            tool_name: Tool name\n            **kwargs: Tool parameters\n\n        Returns:\n            Any: Tool call result\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client:\n            return await self.client.call_tool(server_name, tool_name, kwargs)\n        else:\n            return await self.client.call_tool(tool_name, **kwargs)\n\n    async def list_tools(\n        self, include_server_prefix: bool = True\n    ) -&gt; list[dict[str, Any]]:\n        \"\"\"List all tools\n\n        Args:\n            include_server_prefix: Whether to include server prefix\n\n        Returns:\n            list[dict[str, Any]]: Tool list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client:\n            return cast(\n                list[dict[str, Any]],\n                await self.client.list_all_tools(include_prefix=include_server_prefix),\n            )\n        else:\n            return cast(list[dict[str, Any]], await self.client.list_tools())\n\n    def list_tools_sync(self, target_server: str | None = None) -&gt; list[str]:\n        \"\"\"Synchronously get tool name list\n\n        Args:\n            target_server: Target server name, valid only in multi-server mode\n\n        Returns:\n            list[str]: Tool name list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client and target_server:\n            return cast(list[str], self.client.list_tools(target_server))\n        return cast(list[str], self.client.list_tools())\n\n    def get_tools(self, target_server: str | None = None) -&gt; list[Any]:  # Use Any instead of Tool\n        \"\"\"Get tool list\n\n        Args:\n            target_server: Target server name, valid only in multi-server mode\n\n        Returns:\n            list[Any]: Tool list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client and target_server:\n            return cast(list[Any], self.client.get_tools(target_server))\n        return cast(list[Any], self.client.get_tools())\n\n    def set_prompt(\n        self,\n        prompt_msgs: list[Any],  # Use Any instead of PromptMessage\n        target_server: str | None = None,\n    ) -&gt; None:\n        \"\"\"Set prompt\n\n        Args:\n            prompt_msgs: Prompt message list\n            target_server: Target server name, valid only in multi-server mode\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client and target_server:\n            self.client.set_prompt(prompt_msgs, target_server)\n        else:\n            self.client.set_prompt(prompt_msgs)\n\n    def get_prompt_sync(\n        self, target_server: str | None = None\n    ) -&gt; list[Any]:  # Use Any instead of PromptMessage\n        \"\"\"Get prompt (synchronous version)\n\n        Args:\n            target_server: Target server name, valid only in multi-server mode\n\n        Returns:\n            list[Any]: Prompt message list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client and target_server:\n            return cast(list[Any], self.client.get_prompt(target_server))\n        return cast(list[Any], self.client.get_prompt())\n\n    def get_prompt_by_target(\n        self, target_server: str | None = None\n    ) -&gt; list[Any]:  # Use Any instead of PromptMessage\n        \"\"\"Get prompt (by target server)\n\n        Args:\n            target_server: Target server name, valid only in multi-server mode\n\n        Returns:\n            list[Any]: Prompt message list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client and target_server:\n            return cast(list[Any], self.client.get_prompt(target_server))\n        return cast(list[Any], self.client.get_prompt())\n\n    async def get_prompt(\n        self,\n        prompt_name: str,\n        arguments: dict[str, Any] | None = None,\n        server_name: str = \"default\",\n    ) -&gt; dict[str, Any]:\n        \"\"\"Asynchronously get prompt (compatible with old API)\n\n        Args:\n            prompt_name: Prompt name\n            arguments: Prompt parameters, optional\n            server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n        Returns:\n            dict[str, Any]: Prompt content\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client:\n            # Get specific server's client\n            client = await self.client.get_client(server_name)\n            if client:\n                return cast(\n                    dict[str, Any],\n                    await client.get_prompt(prompt_name, arguments or {}),\n                )\n            else:\n                return {}\n        else:\n            # Directly get prompt\n            return cast(\n                dict[str, Any], await self.client.get_prompt(prompt_name, arguments)\n            )\n\n    async def list_resources(\n        self, server_name: str = \"default\"\n    ) -&gt; list[dict[str, Any]]:\n        \"\"\"Get resource list\n\n        Args:\n            server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n        Returns:\n            list[dict[str, Any]]: Resource list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client:\n            # Get specific server's client\n            client = await self.client.get_client(server_name)\n            if client:\n                return cast(list[dict[str, Any]], await client.list_resources())\n            else:\n                return []\n        else:\n            # Directly get resources\n            return cast(list[dict[str, Any]], await self.client.list_resources())\n\n    async def read_resource(\n        self,\n        resource_name: str = \"\",\n        server_name: str = \"default\",\n    ) -&gt; dict[str, Any]:\n        \"\"\"Read resource content\n\n        Args:\n            resource_name: Resource name\n            server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n        Returns:\n            dict[str, Any]: Resource content\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client:\n            # Get specific server's client\n            client = await self.client.get_client(server_name)\n            if client:\n                return cast(dict[str, Any], await client.read_resource(resource_name))\n            else:\n                return {}\n        else:\n            # Directly read resource\n            return cast(dict[str, Any], await self.client.read_resource(resource_name))\n\n    async def list_prompts(\n        self,\n        server_name: str = \"default\",\n    ) -&gt; list[dict[str, Any]]:\n        \"\"\"Get prompt list\n\n        Args:\n            server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n        Returns:\n            list[dict[str, Any]]: Prompt list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client:\n            # Get specific server's client\n            client = await self.client.get_client(server_name)\n            if client:\n                return cast(list[dict[str, Any]], await client.list_prompts())\n            else:\n                return []\n        else:\n            # Directly get prompt list\n            return cast(list[dict[str, Any]], await self.client.list_prompts())\n\n    def get_tools_as_langchain(\n        self, target_server: str | None = None\n    ) -&gt; list[BaseTool]:\n        \"\"\"Get LangChain format tool\n\n        Convert MCP tool list to LangChain tool list\n\n        Args:\n            target_server: Target server name, valid only in multi-server mode\n\n        Returns:\n            list[BaseTool]: LangChain tool list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        # Get MCP tool list\n        if self._is_multi_client and target_server:\n            mcp_tools = self.client.get_tools(target_server)\n        else:\n            mcp_tools = self.client.get_tools()\n\n        # Use adapter service to convert to LangChain tool\n        return [MCPAdapterService.convert_tool_to_langchain(tool) for tool in mcp_tools]\n\n    async def get_langchain_tools(self, server_name: str = \"default\") -&gt; list[BaseTool]:\n        \"\"\"Asynchronously get LangChain format tool (compatible with old API for testing)\n\n        Args:\n            server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n        Returns:\n            list[BaseTool]: LangChain tool list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        # Use adapter service to load tools\n        from langchain_mcp_toolkit.services.adapters import MCPAdapterService\n\n        session_protocol = cast(\"SessionProtocol\", self.client)\n        return await MCPAdapterService.load_tools_from_session(session_protocol)\n\n    async def get_langchain_prompt(\n        self,\n        prompt_name: str,\n        arguments: dict[str, Any] | None = None,\n        server_name: str = \"default\",\n    ) -&gt; list[BaseMessage]:\n        \"\"\"Asynchronously get LangChain format prompt (compatible with old API for testing)\n\n        Args:\n            prompt_name: Prompt name\n            arguments: Prompt parameters, optional\n            server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n        Returns:\n            list[BaseMessage]: LangChain message list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        # Get prompt\n        prompt_data = await self.get_prompt(prompt_name, arguments, server_name)\n\n        # Convert to LangChain message\n        from langchain_mcp_toolkit.services.adapters import MCPAdapterService\n\n        # Use type conversion to tell mypy this is acceptable\n        prompt_message = cast(PromptMessage, prompt_data)\n        message = MCPAdapterService.convert_prompt_to_langchain(prompt_message)\n\n        return [message]\n\n    async def get_langchain_prompt_async(\n        self,\n        target_server: str | None = None,\n        include_messages_placeholder: bool = True,\n    ) -&gt; ChatPromptTemplate:\n        \"\"\"Asynchronously get LangChain format chat prompt template\n\n        Convert MCP prompt to LangChain format prompt template, including message placeholder\n\n        Args:\n            target_server: Target server name, valid only in multi-server mode\n            include_messages_placeholder: Whether to include message placeholder, for adding history messages\n\n        Returns:\n            ChatPromptTemplate: LangChain chat prompt template\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        # Get MCP prompt\n        if self._is_multi_client and target_server:\n            client = await self.client.get_client(target_server)\n            mcp_prompt = await client.get_prompt() if client else []\n        else:\n            # Directly get prompt\n            mcp_prompt = await self.client.get_prompt()\n\n        # Convert to LangChain message\n        messages: list[BaseMessage] = []\n        for msg in mcp_prompt:\n            if msg.get(\"role\", \"\") == \"user\":\n                messages.append(HumanMessage(content=msg.get(\"content\", \"\")))\n            elif msg.get(\"role\", \"\") == \"assistant\":\n                messages.append(AIMessage(content=msg.get(\"content\", \"\")))\n            else:\n                messages.append(\n                    ChatMessage(\n                        role=msg.get(\"role\", \"system\"), content=msg.get(\"content\", \"\")\n                    )\n                )\n\n        # Add history message placeholder\n        if include_messages_placeholder:\n            # Directly create ChatPromptTemplate instead of first creating a single type message list\n            placeholder = MessagesPlaceholder(variable_name=\"chat_history\")\n            all_messages = messages + [placeholder]  # Type compatible\n            return ChatPromptTemplate.from_messages(all_messages)\n\n        return ChatPromptTemplate.from_messages(messages)\n\n    def get_langchain_prompt_sync(\n        self,\n        target_server: str | None = None,\n        include_messages_placeholder: bool = True,\n    ) -&gt; ChatPromptTemplate:\n        \"\"\"Get LangChain format prompt (synchronous version)\n\n        Convert MCP prompt to LangChain format prompt\n\n        Args:\n            target_server: Target server name, valid only in multi-server mode\n            include_messages_placeholder: Whether to include message placeholder, for adding history messages\n\n        Returns:\n            ChatPromptTemplate: LangChain chat prompt template\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        # Get MCP prompt\n        if self._is_multi_client and target_server:\n            mcp_prompt = self.client.get_prompt(target_server)\n        else:\n            mcp_prompt = self.client.get_prompt()\n\n        # Convert to LangChain message\n        messages: list[BaseMessage] = []\n        for msg in mcp_prompt:\n            if msg.get(\"role\", \"\") == \"user\":\n                messages.append(HumanMessage(content=msg.get(\"content\", \"\")))\n            elif msg.get(\"role\", \"\") == \"assistant\":\n                messages.append(AIMessage(content=msg.get(\"content\", \"\")))\n            else:\n                messages.append(\n                    ChatMessage(\n                        role=msg.get(\"role\", \"system\"), content=msg.get(\"content\", \"\")\n                    )\n                )\n\n        # Add history message placeholder\n        if include_messages_placeholder:\n            # Directly create ChatPromptTemplate instead of first creating a single type message list\n            placeholder = MessagesPlaceholder(variable_name=\"chat_history\")\n            all_messages = messages + [placeholder]  # Type compatible\n            return ChatPromptTemplate.from_messages(all_messages)\n\n        return ChatPromptTemplate.from_messages(messages)\n\n    # Below are methods kept for compatibility with old API\n    async def get_prompt_legacy(\n        self,\n        prompt_name: str,\n        arguments: dict[str, Any] | None = None,\n        server_name: str = \"default\",\n    ) -&gt; dict[str, Any]:\n        \"\"\"Asynchronously get prompt (compatible with old API)\n\n        This method is deprecated, please use get_prompt method\n        \"\"\"\n        return await self.get_prompt(prompt_name, arguments, server_name)\n\n    async def list_resources_internal(\n        self, target_server: str | None = None\n    ) -&gt; list[dict[str, Any]]:\n        \"\"\"Get resource list\n\n        Args:\n            target_server: Target server name, valid only in multi-server mode\n\n        Returns:\n            list[dict[str, Any]]: Resource list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client and target_server:\n            return cast(\n                list[dict[str, Any]], await self.client.list_resources(target_server)\n            )\n        return cast(list[dict[str, Any]], await self.client.list_resources())\n\n    async def read_resource_internal(\n        self,\n        resource_id: str,\n        target_server: str | None = None,\n    ) -&gt; dict[str, Any]:\n        \"\"\"Read resource content\n\n        Args:\n            resource_id: Resource ID\n            target_server: Target server name, valid only in multi-server mode\n\n        Returns:\n            dict[str, Any]: Resource content\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client and target_server:\n            return cast(\n                dict[str, Any],\n                await self.client.read_resource(resource_id, target_server),\n            )\n        return cast(dict[str, Any], await self.client.read_resource(resource_id))\n\n    async def list_prompts_internal(\n        self,\n        target_server: str | None = None,\n    ) -&gt; list[dict[str, Any]]:\n        \"\"\"Get prompt list\n\n        Args:\n            target_server: Target server name, valid only in multi-server mode\n\n        Returns:\n            list[dict[str, Any]]: Prompt list\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client and target_server:\n            return cast(\n                list[dict[str, Any]], await self.client.list_prompts(target_server)\n            )\n        return cast(list[dict[str, Any]], await self.client.list_prompts())\n\n    async def add_resource(\n        self,\n        resource_id: str,\n        resource_content: str,\n        target_server: str | None = None,\n    ) -&gt; None:\n        \"\"\"Add resource\n\n        Args:\n            resource_id: Resource ID\n            resource_content: Resource content\n            target_server: Target server name, valid only in multi-server mode\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client and target_server:\n            await self.client.add_resource(resource_id, resource_content, target_server)\n        else:\n            await self.client.add_resource(resource_id, resource_content)\n\n    async def remove_resource(\n        self,\n        resource_id: str,\n        target_server: str | None = None,\n    ) -&gt; None:\n        \"\"\"Remove resource\n\n        Args:\n            resource_id: Resource ID\n            target_server: Target server name, valid only in multi-server mode\n        \"\"\"\n        self._check_connection()\n\n        if self.client is None:\n            raise ValueError(\"Client not created\")\n\n        if self._is_multi_client and target_server:\n            await self.client.remove_resource(resource_id, target_server)\n        else:\n            await self.client.remove_resource(resource_id)\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.is_connected","title":"<code>is_connected</code>  <code>property</code> <code>writable</code>","text":"<p>Get connection status</p>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.__init__","title":"<code>__init__(verbose=False)</code>","text":"<p>Initialize MCP client service</p> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>bool</code> <p>Whether to enable detailed logging</p> <code>False</code> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>def __init__(self, verbose: bool = False) -&gt; None:\n    \"\"\"Initialize MCP client service\n\n    Args:\n        verbose: Whether to enable detailed logging\n    \"\"\"\n    self.client: Any = None\n    self._is_connected: bool = False\n    self._is_multi_client: bool = False\n    self._verbose: bool = verbose\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.add_resource","title":"<code>add_resource(resource_id, resource_content, target_server=None)</code>  <code>async</code>","text":"<p>Add resource</p> <p>Parameters:</p> Name Type Description Default <code>resource_id</code> <code>str</code> <p>Resource ID</p> required <code>resource_content</code> <code>str</code> <p>Resource content</p> required <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def add_resource(\n    self,\n    resource_id: str,\n    resource_content: str,\n    target_server: str | None = None,\n) -&gt; None:\n    \"\"\"Add resource\n\n    Args:\n        resource_id: Resource ID\n        resource_content: Resource content\n        target_server: Target server name, valid only in multi-server mode\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client and target_server:\n        await self.client.add_resource(resource_id, resource_content, target_server)\n    else:\n        await self.client.add_resource(resource_id, resource_content)\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.call_tool","title":"<code>call_tool(server_name, tool_name, **kwargs)</code>  <code>async</code>","text":"<p>Call tool</p> <p>Parameters:</p> Name Type Description Default <code>server_name</code> <code>str</code> <p>Server name</p> required <code>tool_name</code> <code>str</code> <p>Tool name</p> required <code>**kwargs</code> <code>Any</code> <p>Tool parameters</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Tool call result</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def call_tool(self, server_name: str, tool_name: str, **kwargs: Any) -&gt; Any:\n    \"\"\"Call tool\n\n    Args:\n        server_name: Server name\n        tool_name: Tool name\n        **kwargs: Tool parameters\n\n    Returns:\n        Any: Tool call result\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client:\n        return await self.client.call_tool(server_name, tool_name, kwargs)\n    else:\n        return await self.client.call_tool(tool_name, **kwargs)\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>Connect to server</p> <p>Connect to MCP server. Should be called after create method.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result information</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If client is not created</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def connect(self) -&gt; str:\n    \"\"\"Connect to server\n\n    Connect to MCP server. Should be called after create method.\n\n    Returns:\n        str: Operation result information\n\n    Raises:\n        ValueError: If client is not created\n    \"\"\"\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    # Get client instance\n    client = self.client\n\n    # Connect to server\n    await client.connect()\n\n    self._is_connected = True\n    return \"Connection successful\"\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.create","title":"<code>create(url_or_configs, transport_type='sse', command=None, args=None, output_stream=None)</code>","text":"<p>Create MCP client</p> <p>Parameters:</p> Name Type Description Default <code>url_or_configs</code> <code>str | dict[str, dict[str, Any]]</code> <p>Server URL or multi-server configuration dictionary</p> required <code>transport_type</code> <code>str</code> <p>Transport type, optional values are \"sse\" or \"stdio\", default is \"sse\"</p> <code>'sse'</code> <code>command</code> <code>str | None</code> <p>Command, valid when transport_type is \"stdio\", default is \"python\"</p> <code>None</code> <code>args</code> <code>list[str] | None</code> <p>Command arguments, valid when transport_type is \"stdio\", default is []</p> <code>None</code> <code>output_stream</code> <code>Any | None</code> <p>Output stream, for receiving server response</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result information</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>def create(\n    self,\n    url_or_configs: str | dict[str, dict[str, Any]],\n    transport_type: str = \"sse\",\n    command: str | None = None,\n    args: list[str] | None = None,\n    output_stream: Any | None = None,\n) -&gt; str:\n    \"\"\"Create MCP client\n\n    Args:\n        url_or_configs: Server URL or multi-server configuration dictionary\n        transport_type: Transport type, optional values are \"sse\" or \"stdio\", default is \"sse\"\n        command: Command, valid when transport_type is \"stdio\", default is \"python\"\n        args: Command arguments, valid when transport_type is \"stdio\", default is []\n        output_stream: Output stream, for receiving server response\n\n    Returns:\n        str: Operation result information\n    \"\"\"\n    if self._is_connected:\n        raise ValueError(\"Client service already connected\")\n\n    # Handle output stream\n    if output_stream is None:\n        output_stream = NullOutputStream()\n\n    # Check if it's multi-server configuration\n    if isinstance(url_or_configs, dict):\n        try:\n            self.client = self._create_multi_server_client(url_or_configs)\n            self._is_multi_client = True\n            self._is_connected = True\n            return \"Multi-server client created\"\n        except Exception as e:\n            raise ValueError(f\"Failed to create multi-server client: {e}\") from e\n\n    # Handle single-server configuration\n    url = url_or_configs\n\n    if transport_type == \"sse\":\n        try:\n            if ClientSession is None:\n                raise ImportError(\"ClientSession not defined\")\n            # Type annotation issue: here we use type conversion to explicitly tell mypy this is acceptable\n            # Actually, this part of the code should be refactored, but for now, ensure type check passes\n            self.client = cast(\n                Any,\n                ClientSession(\n                    cast(Any, url), write_stream=cast(Any, output_stream)\n                ),\n            )\n            self._is_connected = True\n            self._is_multi_client = False\n            return f\"Client created connected to {url}\"\n        except Exception as e:\n            raise ValueError(f\"Failed to create SSE client: {e}\") from e\n    elif transport_type == \"stdio\":\n        try:\n            if StdioServerParameters is None or stdio_client is None:\n                raise ImportError(\"StdioServerParameters or stdio_client not defined\")\n\n            cmd = command or \"python\"\n            cmd_args = args or [url]\n\n            params = StdioServerParameters(command=cmd, args=cmd_args)\n            self.client = stdio_client(params)\n            self._is_connected = True\n            self._is_multi_client = False\n            return f\"Client created connected to {url}\"\n        except Exception as e:\n            raise ValueError(f\"Failed to create stdio client: {e}\") from e\n    else:\n        raise ValueError(f\"Unsupported transport type: {transport_type}\")\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>Disconnect</p> <p>Disconnect from MCP server.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result information</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If client is not created</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def disconnect(self) -&gt; str:\n    \"\"\"Disconnect\n\n    Disconnect from MCP server.\n\n    Returns:\n        str: Operation result information\n\n    Raises:\n        ValueError: If client is not created\n    \"\"\"\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    # Get client instance\n    client = self.client\n\n    # Disconnect\n    await client.disconnect()\n\n    self._is_connected = False\n    return \"Disconnected\"\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.get_langchain_prompt","title":"<code>get_langchain_prompt(prompt_name, arguments=None, server_name='default')</code>  <code>async</code>","text":"<p>Asynchronously get LangChain format prompt (compatible with old API for testing)</p> <p>Parameters:</p> Name Type Description Default <code>prompt_name</code> <code>str</code> <p>Prompt name</p> required <code>arguments</code> <code>dict[str, Any] | None</code> <p>Prompt parameters, optional</p> <code>None</code> <code>server_name</code> <code>str</code> <p>Server name, valid only in multi-server mode, default is \"default\"</p> <code>'default'</code> <p>Returns:</p> Type Description <code>list[BaseMessage]</code> <p>list[BaseMessage]: LangChain message list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def get_langchain_prompt(\n    self,\n    prompt_name: str,\n    arguments: dict[str, Any] | None = None,\n    server_name: str = \"default\",\n) -&gt; list[BaseMessage]:\n    \"\"\"Asynchronously get LangChain format prompt (compatible with old API for testing)\n\n    Args:\n        prompt_name: Prompt name\n        arguments: Prompt parameters, optional\n        server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n    Returns:\n        list[BaseMessage]: LangChain message list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    # Get prompt\n    prompt_data = await self.get_prompt(prompt_name, arguments, server_name)\n\n    # Convert to LangChain message\n    from langchain_mcp_toolkit.services.adapters import MCPAdapterService\n\n    # Use type conversion to tell mypy this is acceptable\n    prompt_message = cast(PromptMessage, prompt_data)\n    message = MCPAdapterService.convert_prompt_to_langchain(prompt_message)\n\n    return [message]\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.get_langchain_prompt_async","title":"<code>get_langchain_prompt_async(target_server=None, include_messages_placeholder=True)</code>  <code>async</code>","text":"<p>Asynchronously get LangChain format chat prompt template</p> <p>Convert MCP prompt to LangChain format prompt template, including message placeholder</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> <code>include_messages_placeholder</code> <code>bool</code> <p>Whether to include message placeholder, for adding history messages</p> <code>True</code> <p>Returns:</p> Name Type Description <code>ChatPromptTemplate</code> <code>ChatPromptTemplate</code> <p>LangChain chat prompt template</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def get_langchain_prompt_async(\n    self,\n    target_server: str | None = None,\n    include_messages_placeholder: bool = True,\n) -&gt; ChatPromptTemplate:\n    \"\"\"Asynchronously get LangChain format chat prompt template\n\n    Convert MCP prompt to LangChain format prompt template, including message placeholder\n\n    Args:\n        target_server: Target server name, valid only in multi-server mode\n        include_messages_placeholder: Whether to include message placeholder, for adding history messages\n\n    Returns:\n        ChatPromptTemplate: LangChain chat prompt template\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    # Get MCP prompt\n    if self._is_multi_client and target_server:\n        client = await self.client.get_client(target_server)\n        mcp_prompt = await client.get_prompt() if client else []\n    else:\n        # Directly get prompt\n        mcp_prompt = await self.client.get_prompt()\n\n    # Convert to LangChain message\n    messages: list[BaseMessage] = []\n    for msg in mcp_prompt:\n        if msg.get(\"role\", \"\") == \"user\":\n            messages.append(HumanMessage(content=msg.get(\"content\", \"\")))\n        elif msg.get(\"role\", \"\") == \"assistant\":\n            messages.append(AIMessage(content=msg.get(\"content\", \"\")))\n        else:\n            messages.append(\n                ChatMessage(\n                    role=msg.get(\"role\", \"system\"), content=msg.get(\"content\", \"\")\n                )\n            )\n\n    # Add history message placeholder\n    if include_messages_placeholder:\n        # Directly create ChatPromptTemplate instead of first creating a single type message list\n        placeholder = MessagesPlaceholder(variable_name=\"chat_history\")\n        all_messages = messages + [placeholder]  # Type compatible\n        return ChatPromptTemplate.from_messages(all_messages)\n\n    return ChatPromptTemplate.from_messages(messages)\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.get_langchain_prompt_sync","title":"<code>get_langchain_prompt_sync(target_server=None, include_messages_placeholder=True)</code>","text":"<p>Get LangChain format prompt (synchronous version)</p> <p>Convert MCP prompt to LangChain format prompt</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> <code>include_messages_placeholder</code> <code>bool</code> <p>Whether to include message placeholder, for adding history messages</p> <code>True</code> <p>Returns:</p> Name Type Description <code>ChatPromptTemplate</code> <code>ChatPromptTemplate</code> <p>LangChain chat prompt template</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>def get_langchain_prompt_sync(\n    self,\n    target_server: str | None = None,\n    include_messages_placeholder: bool = True,\n) -&gt; ChatPromptTemplate:\n    \"\"\"Get LangChain format prompt (synchronous version)\n\n    Convert MCP prompt to LangChain format prompt\n\n    Args:\n        target_server: Target server name, valid only in multi-server mode\n        include_messages_placeholder: Whether to include message placeholder, for adding history messages\n\n    Returns:\n        ChatPromptTemplate: LangChain chat prompt template\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    # Get MCP prompt\n    if self._is_multi_client and target_server:\n        mcp_prompt = self.client.get_prompt(target_server)\n    else:\n        mcp_prompt = self.client.get_prompt()\n\n    # Convert to LangChain message\n    messages: list[BaseMessage] = []\n    for msg in mcp_prompt:\n        if msg.get(\"role\", \"\") == \"user\":\n            messages.append(HumanMessage(content=msg.get(\"content\", \"\")))\n        elif msg.get(\"role\", \"\") == \"assistant\":\n            messages.append(AIMessage(content=msg.get(\"content\", \"\")))\n        else:\n            messages.append(\n                ChatMessage(\n                    role=msg.get(\"role\", \"system\"), content=msg.get(\"content\", \"\")\n                )\n            )\n\n    # Add history message placeholder\n    if include_messages_placeholder:\n        # Directly create ChatPromptTemplate instead of first creating a single type message list\n        placeholder = MessagesPlaceholder(variable_name=\"chat_history\")\n        all_messages = messages + [placeholder]  # Type compatible\n        return ChatPromptTemplate.from_messages(all_messages)\n\n    return ChatPromptTemplate.from_messages(messages)\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.get_langchain_tools","title":"<code>get_langchain_tools(server_name='default')</code>  <code>async</code>","text":"<p>Asynchronously get LangChain format tool (compatible with old API for testing)</p> <p>Parameters:</p> Name Type Description Default <code>server_name</code> <code>str</code> <p>Server name, valid only in multi-server mode, default is \"default\"</p> <code>'default'</code> <p>Returns:</p> Type Description <code>list[BaseTool]</code> <p>list[BaseTool]: LangChain tool list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def get_langchain_tools(self, server_name: str = \"default\") -&gt; list[BaseTool]:\n    \"\"\"Asynchronously get LangChain format tool (compatible with old API for testing)\n\n    Args:\n        server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n    Returns:\n        list[BaseTool]: LangChain tool list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    # Use adapter service to load tools\n    from langchain_mcp_toolkit.services.adapters import MCPAdapterService\n\n    session_protocol = cast(\"SessionProtocol\", self.client)\n    return await MCPAdapterService.load_tools_from_session(session_protocol)\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.get_prompt","title":"<code>get_prompt(prompt_name, arguments=None, server_name='default')</code>  <code>async</code>","text":"<p>Asynchronously get prompt (compatible with old API)</p> <p>Parameters:</p> Name Type Description Default <code>prompt_name</code> <code>str</code> <p>Prompt name</p> required <code>arguments</code> <code>dict[str, Any] | None</code> <p>Prompt parameters, optional</p> <code>None</code> <code>server_name</code> <code>str</code> <p>Server name, valid only in multi-server mode, default is \"default\"</p> <code>'default'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Prompt content</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def get_prompt(\n    self,\n    prompt_name: str,\n    arguments: dict[str, Any] | None = None,\n    server_name: str = \"default\",\n) -&gt; dict[str, Any]:\n    \"\"\"Asynchronously get prompt (compatible with old API)\n\n    Args:\n        prompt_name: Prompt name\n        arguments: Prompt parameters, optional\n        server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n    Returns:\n        dict[str, Any]: Prompt content\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client:\n        # Get specific server's client\n        client = await self.client.get_client(server_name)\n        if client:\n            return cast(\n                dict[str, Any],\n                await client.get_prompt(prompt_name, arguments or {}),\n            )\n        else:\n            return {}\n    else:\n        # Directly get prompt\n        return cast(\n            dict[str, Any], await self.client.get_prompt(prompt_name, arguments)\n        )\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.get_prompt_by_target","title":"<code>get_prompt_by_target(target_server=None)</code>","text":"<p>Get prompt (by target server)</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Any]</code> <p>list[Any]: Prompt message list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>def get_prompt_by_target(\n    self, target_server: str | None = None\n) -&gt; list[Any]:  # Use Any instead of PromptMessage\n    \"\"\"Get prompt (by target server)\n\n    Args:\n        target_server: Target server name, valid only in multi-server mode\n\n    Returns:\n        list[Any]: Prompt message list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client and target_server:\n        return cast(list[Any], self.client.get_prompt(target_server))\n    return cast(list[Any], self.client.get_prompt())\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.get_prompt_legacy","title":"<code>get_prompt_legacy(prompt_name, arguments=None, server_name='default')</code>  <code>async</code>","text":"<p>Asynchronously get prompt (compatible with old API)</p> <p>This method is deprecated, please use get_prompt method</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def get_prompt_legacy(\n    self,\n    prompt_name: str,\n    arguments: dict[str, Any] | None = None,\n    server_name: str = \"default\",\n) -&gt; dict[str, Any]:\n    \"\"\"Asynchronously get prompt (compatible with old API)\n\n    This method is deprecated, please use get_prompt method\n    \"\"\"\n    return await self.get_prompt(prompt_name, arguments, server_name)\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.get_prompt_sync","title":"<code>get_prompt_sync(target_server=None)</code>","text":"<p>Get prompt (synchronous version)</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Any]</code> <p>list[Any]: Prompt message list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>def get_prompt_sync(\n    self, target_server: str | None = None\n) -&gt; list[Any]:  # Use Any instead of PromptMessage\n    \"\"\"Get prompt (synchronous version)\n\n    Args:\n        target_server: Target server name, valid only in multi-server mode\n\n    Returns:\n        list[Any]: Prompt message list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client and target_server:\n        return cast(list[Any], self.client.get_prompt(target_server))\n    return cast(list[Any], self.client.get_prompt())\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.get_tools","title":"<code>get_tools(target_server=None)</code>","text":"<p>Get tool list</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Any]</code> <p>list[Any]: Tool list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>def get_tools(self, target_server: str | None = None) -&gt; list[Any]:  # Use Any instead of Tool\n    \"\"\"Get tool list\n\n    Args:\n        target_server: Target server name, valid only in multi-server mode\n\n    Returns:\n        list[Any]: Tool list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client and target_server:\n        return cast(list[Any], self.client.get_tools(target_server))\n    return cast(list[Any], self.client.get_tools())\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.get_tools_as_langchain","title":"<code>get_tools_as_langchain(target_server=None)</code>","text":"<p>Get LangChain format tool</p> <p>Convert MCP tool list to LangChain tool list</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> <p>Returns:</p> Type Description <code>list[BaseTool]</code> <p>list[BaseTool]: LangChain tool list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>def get_tools_as_langchain(\n    self, target_server: str | None = None\n) -&gt; list[BaseTool]:\n    \"\"\"Get LangChain format tool\n\n    Convert MCP tool list to LangChain tool list\n\n    Args:\n        target_server: Target server name, valid only in multi-server mode\n\n    Returns:\n        list[BaseTool]: LangChain tool list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    # Get MCP tool list\n    if self._is_multi_client and target_server:\n        mcp_tools = self.client.get_tools(target_server)\n    else:\n        mcp_tools = self.client.get_tools()\n\n    # Use adapter service to convert to LangChain tool\n    return [MCPAdapterService.convert_tool_to_langchain(tool) for tool in mcp_tools]\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.list_prompts","title":"<code>list_prompts(server_name='default')</code>  <code>async</code>","text":"<p>Get prompt list</p> <p>Parameters:</p> Name Type Description Default <code>server_name</code> <code>str</code> <p>Server name, valid only in multi-server mode, default is \"default\"</p> <code>'default'</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: Prompt list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def list_prompts(\n    self,\n    server_name: str = \"default\",\n) -&gt; list[dict[str, Any]]:\n    \"\"\"Get prompt list\n\n    Args:\n        server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n    Returns:\n        list[dict[str, Any]]: Prompt list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client:\n        # Get specific server's client\n        client = await self.client.get_client(server_name)\n        if client:\n            return cast(list[dict[str, Any]], await client.list_prompts())\n        else:\n            return []\n    else:\n        # Directly get prompt list\n        return cast(list[dict[str, Any]], await self.client.list_prompts())\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.list_prompts_internal","title":"<code>list_prompts_internal(target_server=None)</code>  <code>async</code>","text":"<p>Get prompt list</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: Prompt list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def list_prompts_internal(\n    self,\n    target_server: str | None = None,\n) -&gt; list[dict[str, Any]]:\n    \"\"\"Get prompt list\n\n    Args:\n        target_server: Target server name, valid only in multi-server mode\n\n    Returns:\n        list[dict[str, Any]]: Prompt list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client and target_server:\n        return cast(\n            list[dict[str, Any]], await self.client.list_prompts(target_server)\n        )\n    return cast(list[dict[str, Any]], await self.client.list_prompts())\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.list_resources","title":"<code>list_resources(server_name='default')</code>  <code>async</code>","text":"<p>Get resource list</p> <p>Parameters:</p> Name Type Description Default <code>server_name</code> <code>str</code> <p>Server name, valid only in multi-server mode, default is \"default\"</p> <code>'default'</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: Resource list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def list_resources(\n    self, server_name: str = \"default\"\n) -&gt; list[dict[str, Any]]:\n    \"\"\"Get resource list\n\n    Args:\n        server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n    Returns:\n        list[dict[str, Any]]: Resource list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client:\n        # Get specific server's client\n        client = await self.client.get_client(server_name)\n        if client:\n            return cast(list[dict[str, Any]], await client.list_resources())\n        else:\n            return []\n    else:\n        # Directly get resources\n        return cast(list[dict[str, Any]], await self.client.list_resources())\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.list_resources_internal","title":"<code>list_resources_internal(target_server=None)</code>  <code>async</code>","text":"<p>Get resource list</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: Resource list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def list_resources_internal(\n    self, target_server: str | None = None\n) -&gt; list[dict[str, Any]]:\n    \"\"\"Get resource list\n\n    Args:\n        target_server: Target server name, valid only in multi-server mode\n\n    Returns:\n        list[dict[str, Any]]: Resource list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client and target_server:\n        return cast(\n            list[dict[str, Any]], await self.client.list_resources(target_server)\n        )\n    return cast(list[dict[str, Any]], await self.client.list_resources())\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.list_tools","title":"<code>list_tools(include_server_prefix=True)</code>  <code>async</code>","text":"<p>List all tools</p> <p>Parameters:</p> Name Type Description Default <code>include_server_prefix</code> <code>bool</code> <p>Whether to include server prefix</p> <code>True</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: Tool list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def list_tools(\n    self, include_server_prefix: bool = True\n) -&gt; list[dict[str, Any]]:\n    \"\"\"List all tools\n\n    Args:\n        include_server_prefix: Whether to include server prefix\n\n    Returns:\n        list[dict[str, Any]]: Tool list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client:\n        return cast(\n            list[dict[str, Any]],\n            await self.client.list_all_tools(include_prefix=include_server_prefix),\n        )\n    else:\n        return cast(list[dict[str, Any]], await self.client.list_tools())\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.list_tools_sync","title":"<code>list_tools_sync(target_server=None)</code>","text":"<p>Synchronously get tool name list</p> <p>Parameters:</p> Name Type Description Default <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: Tool name list</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>def list_tools_sync(self, target_server: str | None = None) -&gt; list[str]:\n    \"\"\"Synchronously get tool name list\n\n    Args:\n        target_server: Target server name, valid only in multi-server mode\n\n    Returns:\n        list[str]: Tool name list\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client and target_server:\n        return cast(list[str], self.client.list_tools(target_server))\n    return cast(list[str], self.client.list_tools())\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.read_resource","title":"<code>read_resource(resource_name='', server_name='default')</code>  <code>async</code>","text":"<p>Read resource content</p> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>Resource name</p> <code>''</code> <code>server_name</code> <code>str</code> <p>Server name, valid only in multi-server mode, default is \"default\"</p> <code>'default'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Resource content</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def read_resource(\n    self,\n    resource_name: str = \"\",\n    server_name: str = \"default\",\n) -&gt; dict[str, Any]:\n    \"\"\"Read resource content\n\n    Args:\n        resource_name: Resource name\n        server_name: Server name, valid only in multi-server mode, default is \"default\"\n\n    Returns:\n        dict[str, Any]: Resource content\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client:\n        # Get specific server's client\n        client = await self.client.get_client(server_name)\n        if client:\n            return cast(dict[str, Any], await client.read_resource(resource_name))\n        else:\n            return {}\n    else:\n        # Directly read resource\n        return cast(dict[str, Any], await self.client.read_resource(resource_name))\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.read_resource_internal","title":"<code>read_resource_internal(resource_id, target_server=None)</code>  <code>async</code>","text":"<p>Read resource content</p> <p>Parameters:</p> Name Type Description Default <code>resource_id</code> <code>str</code> <p>Resource ID</p> required <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Resource content</p> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def read_resource_internal(\n    self,\n    resource_id: str,\n    target_server: str | None = None,\n) -&gt; dict[str, Any]:\n    \"\"\"Read resource content\n\n    Args:\n        resource_id: Resource ID\n        target_server: Target server name, valid only in multi-server mode\n\n    Returns:\n        dict[str, Any]: Resource content\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client and target_server:\n        return cast(\n            dict[str, Any],\n            await self.client.read_resource(resource_id, target_server),\n        )\n    return cast(dict[str, Any], await self.client.read_resource(resource_id))\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.remove_resource","title":"<code>remove_resource(resource_id, target_server=None)</code>  <code>async</code>","text":"<p>Remove resource</p> <p>Parameters:</p> Name Type Description Default <code>resource_id</code> <code>str</code> <p>Resource ID</p> required <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>async def remove_resource(\n    self,\n    resource_id: str,\n    target_server: str | None = None,\n) -&gt; None:\n    \"\"\"Remove resource\n\n    Args:\n        resource_id: Resource ID\n        target_server: Target server name, valid only in multi-server mode\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client and target_server:\n        await self.client.remove_resource(resource_id, target_server)\n    else:\n        await self.client.remove_resource(resource_id)\n</code></pre>"},{"location":"api/client_service/#langchain_mcp_toolkit.services.client_service.MCPClientService.set_prompt","title":"<code>set_prompt(prompt_msgs, target_server=None)</code>","text":"<p>Set prompt</p> <p>Parameters:</p> Name Type Description Default <code>prompt_msgs</code> <code>list[Any]</code> <p>Prompt message list</p> required <code>target_server</code> <code>str | None</code> <p>Target server name, valid only in multi-server mode</p> <code>None</code> Source code in <code>src/langchain_mcp_toolkit/services/client_service.py</code> <pre><code>def set_prompt(\n    self,\n    prompt_msgs: list[Any],  # Use Any instead of PromptMessage\n    target_server: str | None = None,\n) -&gt; None:\n    \"\"\"Set prompt\n\n    Args:\n        prompt_msgs: Prompt message list\n        target_server: Target server name, valid only in multi-server mode\n    \"\"\"\n    self._check_connection()\n\n    if self.client is None:\n        raise ValueError(\"Client not created\")\n\n    if self._is_multi_client and target_server:\n        self.client.set_prompt(prompt_msgs, target_server)\n    else:\n        self.client.set_prompt(prompt_msgs)\n</code></pre>"},{"location":"api/factory/","title":"MCP Tool Factory","text":"<p>MCP Tool Factory class, used to create MCP tool instances</p> <p>This class is responsible for initializing services and creating tool instances, and is one of the core components of MCPToolkit. The factory pattern simplifies the tool creation and management process, allowing users to easily obtain the required tool collections.</p> <p>Attributes:</p> Name Type Description <code>_client_service</code> <code>MCPClientService | None</code> <p>Client service instance</p> <code>_server_service</code> <code>MCPServerService | None</code> <p>Server service instance</p> Example <pre><code># Create factory instance\nfactory = MCPToolFactory()\n\n# Initialize services\nfactory.init_client_service()\nfactory.init_server_service()\n\n# Get all tools\nall_tools = factory.create_all_tools()\n\n# Get specific tools by name\nspecific_tools = factory.get_tools_by_names([\"server_start\", \"client_create\"])\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/factory.py</code> <pre><code>class MCPToolFactory:\n    \"\"\"\n    MCP Tool Factory class, used to create MCP tool instances\n\n    This class is responsible for initializing services and creating tool instances, and is one of the core components of MCPToolkit.\n    The factory pattern simplifies the tool creation and management process, allowing users to easily obtain the required tool collections.\n\n    Attributes:\n        _client_service: Client service instance\n        _server_service: Server service instance\n\n    Example:\n        ```python\n        # Create factory instance\n        factory = MCPToolFactory()\n\n        # Initialize services\n        factory.init_client_service()\n        factory.init_server_service()\n\n        # Get all tools\n        all_tools = factory.create_all_tools()\n\n        # Get specific tools by name\n        specific_tools = factory.get_tools_by_names([\"server_start\", \"client_create\"])\n        ```\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"\n        Initialize tool factory\n\n        Creates a new tool factory instance, but does not automatically initialize any services.\n        Need to call init_client_service and init_server_service methods separately.\n        \"\"\"\n        self._client_service: MCPClientService | None = None\n        self._server_service: MCPServerService | None = None\n\n    @property\n    def client_service(self) -&gt; MCPClientService | None:\n        \"\"\"\n        Get client service instance\n\n        Returns:\n            MCPClientService | None: Client service instance, returns None if not created\n\n        Example:\n            ```python\n            factory = MCPToolFactory()\n\n            # Check if client service is initialized\n            if factory.client_service is None:\n                factory.init_client_service()\n\n            # Use client service\n            client_service = factory.client_service\n            ```\n        \"\"\"\n        return self._client_service\n\n    @property\n    def server_service(self) -&gt; MCPServerService | None:\n        \"\"\"\n        Get server service instance\n\n        Returns:\n            MCPServerService | None: Server service instance, returns None if not created\n\n        Example:\n            ```python\n            factory = MCPToolFactory()\n\n            # Check if server service is initialized\n            if factory.server_service is None:\n                factory.init_server_service()\n\n            # Use server service\n            server_service = factory.server_service\n            ```\n        \"\"\"\n        return self._server_service\n\n    def init_client_service(self) -&gt; MCPClientService:\n        \"\"\"\n        Initialize client service\n\n        Creates and initializes a new MCPClientService instance.\n\n        Returns:\n            MCPClientService: Initialized client service instance\n\n        Example:\n            ```python\n            factory = MCPToolFactory()\n            client_service = factory.init_client_service()\n\n            # Use client service\n            await client_service.create(\"http://localhost:8000\")\n            ```\n        \"\"\"\n        client_service = MCPClientService()\n        self._client_service = client_service\n        return client_service\n\n    def init_server_service(self) -&gt; MCPServerService:\n        \"\"\"\n        Initialize server service\n\n        Creates and initializes a new MCPServerService instance.\n\n        Returns:\n            MCPServerService: Initialized server service instance\n\n        Example:\n            ```python\n            factory = MCPToolFactory()\n            server_service = factory.init_server_service()\n\n            # Use server service\n            await server_service.start(\"localhost\", 8000)\n            ```\n        \"\"\"\n        server_service = MCPServerService()\n        self._server_service = server_service\n        return server_service\n\n    def create_client_tools(self) -&gt; list[BaseTool]:\n        \"\"\"\n        Create all client tools\n\n        Creates and returns a list of all available client tools, including tools for creating clients, calling tools,\n        operating on resources and prompts, etc.\n\n        Returns:\n            list[BaseTool]: List of client tools\n\n        Raises:\n            ValueError: If client service is not initialized\n\n        Example:\n            ```python\n            factory = MCPToolFactory()\n            factory.init_client_service()\n\n            # Get all client tools\n            client_tools = factory.create_client_tools()\n\n            # Use tools\n            client_create_tool = client_tools[0]\n            await client_create_tool.invoke({\"url\": \"http://localhost:8000\"})\n            ```\n        \"\"\"\n        if not self._client_service:\n            raise ValueError(\"Client service not initialized, please call init_client_service first\")\n\n\n        client_tools: list[BaseTool] = [\n            ClientCreateTool(client_service=self._client_service),\n            ClientCallToolTool(client_service=self._client_service),\n            ClientListToolsTool(client_service=self._client_service),\n            ClientListResourcesTool(client_service=self._client_service),\n            ClientReadResourceTool(client_service=self._client_service),\n            ClientListPromptsTool(client_service=self._client_service),\n            ClientGetPromptTool(client_service=self._client_service),\n            GetLangChainToolsTool(client_service=self._client_service),\n            GetLangChainPromptTool(client_service=self._client_service),\n        ]\n\n        return client_tools\n\n    def create_server_tools(self) -&gt; list[BaseTool]:\n        \"\"\"\n        Create all server tools\n\n        Creates and returns a list of all available server tools, including tools for starting and stopping servers,\n        adding tools, resources, and prompts.\n\n        Returns:\n            list[BaseTool]: List of server tools\n\n        Raises:\n            ValueError: If server service is not initialized\n\n        Example:\n            ```python\n            factory = MCPToolFactory()\n            factory.init_server_service()\n\n            # Get all server tools\n            server_tools = factory.create_server_tools()\n\n            # Use tools\n            server_start_tool = server_tools[0]\n            await server_start_tool.invoke({\"host\": \"localhost\", \"port\": 8000})\n            ```\n        \"\"\"\n        if not self._server_service:\n            raise ValueError(\"Server service not initialized, please call init_server_service first\")\n\n        server_tools: list[BaseTool] = [\n            ServerStartTool(server_service=self._server_service),\n            ServerStopTool(server_service=self._server_service),\n            ServerGetUrlTool(server_service=self._server_service),\n            ServerAddToolTool(server_service=self._server_service),\n            ServerAddResourceTool(server_service=self._server_service),\n            ServerAddPromptTool(server_service=self._server_service),\n        ]\n\n        return server_tools\n\n    def create_all_tools(self) -&gt; list[BaseTool]:\n        \"\"\"\n        Create all tools\n\n        Creates and returns a list of all available tools, including both client and server tools.\n        If a service is not initialized, its tools will not be included.\n\n        Returns:\n            list[BaseTool]: List of all tools\n\n        Example:\n            ```python\n            factory = MCPToolFactory()\n\n            # Initialize both services\n            factory.init_client_service()\n            factory.init_server_service()\n\n            # Get all tools\n            all_tools = factory.create_all_tools()\n\n            # Use tools\n            server_start_tool = [t for t in all_tools if t.name == \"server_start\"][0]\n            await server_start_tool.invoke({\"host\": \"localhost\", \"port\": 8000})\n            ```\n        \"\"\"\n        tools: list[BaseTool] = []\n\n        if self._client_service:\n            tools.extend(self.create_client_tools())\n\n        if self._server_service:\n            tools.extend(self.create_server_tools())\n\n        return tools\n\n    def get_tools_by_names(self, names: list[str]) -&gt; list[BaseTool]:\n        \"\"\"\n        Get tools by names\n\n        Returns a list of tools matching the specified names.\n        If a tool is not found, it will be skipped.\n\n        Args:\n            names: List of tool names to retrieve\n\n        Returns:\n            list[BaseTool]: List of found tools\n\n        Example:\n            ```python\n            factory = MCPToolFactory()\n\n            # Initialize both services\n            factory.init_client_service()\n            factory.init_server_service()\n\n            # Get all tools\n            all_tools = factory.create_all_tools()\n\n            # Use tools\n            server_start_tool = [t for t in all_tools if t.name == \"server_start\"][0]\n            await server_start_tool.invoke({\"host\": \"localhost\", \"port\": 8000})\n            ```\n        \"\"\"\n        all_tools = self.create_all_tools()\n        result: list[BaseTool] = []\n\n        for name in names:\n            matching_tools = [tool for tool in all_tools if tool.name == name]\n            if matching_tools:\n                result.append(matching_tools[0])\n\n        return result\n</code></pre>"},{"location":"api/factory/#langchain_mcp_toolkit.factory.MCPToolFactory.client_service","title":"<code>client_service</code>  <code>property</code>","text":"<p>Get client service instance</p> <p>Returns:</p> Type Description <code>MCPClientService | None</code> <p>MCPClientService | None: Client service instance, returns None if not created</p> Example <pre><code>factory = MCPToolFactory()\n\n# Check if client service is initialized\nif factory.client_service is None:\n    factory.init_client_service()\n\n# Use client service\nclient_service = factory.client_service\n</code></pre>"},{"location":"api/factory/#langchain_mcp_toolkit.factory.MCPToolFactory.server_service","title":"<code>server_service</code>  <code>property</code>","text":"<p>Get server service instance</p> <p>Returns:</p> Type Description <code>MCPServerService | None</code> <p>MCPServerService | None: Server service instance, returns None if not created</p> Example <pre><code>factory = MCPToolFactory()\n\n# Check if server service is initialized\nif factory.server_service is None:\n    factory.init_server_service()\n\n# Use server service\nserver_service = factory.server_service\n</code></pre>"},{"location":"api/factory/#langchain_mcp_toolkit.factory.MCPToolFactory.__init__","title":"<code>__init__()</code>","text":"<p>Initialize tool factory</p> <p>Creates a new tool factory instance, but does not automatically initialize any services. Need to call init_client_service and init_server_service methods separately.</p> Source code in <code>src/langchain_mcp_toolkit/factory.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"\n    Initialize tool factory\n\n    Creates a new tool factory instance, but does not automatically initialize any services.\n    Need to call init_client_service and init_server_service methods separately.\n    \"\"\"\n    self._client_service: MCPClientService | None = None\n    self._server_service: MCPServerService | None = None\n</code></pre>"},{"location":"api/factory/#langchain_mcp_toolkit.factory.MCPToolFactory.create_all_tools","title":"<code>create_all_tools()</code>","text":"<p>Create all tools</p> <p>Creates and returns a list of all available tools, including both client and server tools. If a service is not initialized, its tools will not be included.</p> <p>Returns:</p> Type Description <code>list[BaseTool]</code> <p>list[BaseTool]: List of all tools</p> Example <pre><code>factory = MCPToolFactory()\n\n# Initialize both services\nfactory.init_client_service()\nfactory.init_server_service()\n\n# Get all tools\nall_tools = factory.create_all_tools()\n\n# Use tools\nserver_start_tool = [t for t in all_tools if t.name == \"server_start\"][0]\nawait server_start_tool.invoke({\"host\": \"localhost\", \"port\": 8000})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/factory.py</code> <pre><code>def create_all_tools(self) -&gt; list[BaseTool]:\n    \"\"\"\n    Create all tools\n\n    Creates and returns a list of all available tools, including both client and server tools.\n    If a service is not initialized, its tools will not be included.\n\n    Returns:\n        list[BaseTool]: List of all tools\n\n    Example:\n        ```python\n        factory = MCPToolFactory()\n\n        # Initialize both services\n        factory.init_client_service()\n        factory.init_server_service()\n\n        # Get all tools\n        all_tools = factory.create_all_tools()\n\n        # Use tools\n        server_start_tool = [t for t in all_tools if t.name == \"server_start\"][0]\n        await server_start_tool.invoke({\"host\": \"localhost\", \"port\": 8000})\n        ```\n    \"\"\"\n    tools: list[BaseTool] = []\n\n    if self._client_service:\n        tools.extend(self.create_client_tools())\n\n    if self._server_service:\n        tools.extend(self.create_server_tools())\n\n    return tools\n</code></pre>"},{"location":"api/factory/#langchain_mcp_toolkit.factory.MCPToolFactory.create_client_tools","title":"<code>create_client_tools()</code>","text":"<p>Create all client tools</p> <p>Creates and returns a list of all available client tools, including tools for creating clients, calling tools, operating on resources and prompts, etc.</p> <p>Returns:</p> Type Description <code>list[BaseTool]</code> <p>list[BaseTool]: List of client tools</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If client service is not initialized</p> Example <pre><code>factory = MCPToolFactory()\nfactory.init_client_service()\n\n# Get all client tools\nclient_tools = factory.create_client_tools()\n\n# Use tools\nclient_create_tool = client_tools[0]\nawait client_create_tool.invoke({\"url\": \"http://localhost:8000\"})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/factory.py</code> <pre><code>def create_client_tools(self) -&gt; list[BaseTool]:\n    \"\"\"\n    Create all client tools\n\n    Creates and returns a list of all available client tools, including tools for creating clients, calling tools,\n    operating on resources and prompts, etc.\n\n    Returns:\n        list[BaseTool]: List of client tools\n\n    Raises:\n        ValueError: If client service is not initialized\n\n    Example:\n        ```python\n        factory = MCPToolFactory()\n        factory.init_client_service()\n\n        # Get all client tools\n        client_tools = factory.create_client_tools()\n\n        # Use tools\n        client_create_tool = client_tools[0]\n        await client_create_tool.invoke({\"url\": \"http://localhost:8000\"})\n        ```\n    \"\"\"\n    if not self._client_service:\n        raise ValueError(\"Client service not initialized, please call init_client_service first\")\n\n\n    client_tools: list[BaseTool] = [\n        ClientCreateTool(client_service=self._client_service),\n        ClientCallToolTool(client_service=self._client_service),\n        ClientListToolsTool(client_service=self._client_service),\n        ClientListResourcesTool(client_service=self._client_service),\n        ClientReadResourceTool(client_service=self._client_service),\n        ClientListPromptsTool(client_service=self._client_service),\n        ClientGetPromptTool(client_service=self._client_service),\n        GetLangChainToolsTool(client_service=self._client_service),\n        GetLangChainPromptTool(client_service=self._client_service),\n    ]\n\n    return client_tools\n</code></pre>"},{"location":"api/factory/#langchain_mcp_toolkit.factory.MCPToolFactory.create_server_tools","title":"<code>create_server_tools()</code>","text":"<p>Create all server tools</p> <p>Creates and returns a list of all available server tools, including tools for starting and stopping servers, adding tools, resources, and prompts.</p> <p>Returns:</p> Type Description <code>list[BaseTool]</code> <p>list[BaseTool]: List of server tools</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If server service is not initialized</p> Example <pre><code>factory = MCPToolFactory()\nfactory.init_server_service()\n\n# Get all server tools\nserver_tools = factory.create_server_tools()\n\n# Use tools\nserver_start_tool = server_tools[0]\nawait server_start_tool.invoke({\"host\": \"localhost\", \"port\": 8000})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/factory.py</code> <pre><code>def create_server_tools(self) -&gt; list[BaseTool]:\n    \"\"\"\n    Create all server tools\n\n    Creates and returns a list of all available server tools, including tools for starting and stopping servers,\n    adding tools, resources, and prompts.\n\n    Returns:\n        list[BaseTool]: List of server tools\n\n    Raises:\n        ValueError: If server service is not initialized\n\n    Example:\n        ```python\n        factory = MCPToolFactory()\n        factory.init_server_service()\n\n        # Get all server tools\n        server_tools = factory.create_server_tools()\n\n        # Use tools\n        server_start_tool = server_tools[0]\n        await server_start_tool.invoke({\"host\": \"localhost\", \"port\": 8000})\n        ```\n    \"\"\"\n    if not self._server_service:\n        raise ValueError(\"Server service not initialized, please call init_server_service first\")\n\n    server_tools: list[BaseTool] = [\n        ServerStartTool(server_service=self._server_service),\n        ServerStopTool(server_service=self._server_service),\n        ServerGetUrlTool(server_service=self._server_service),\n        ServerAddToolTool(server_service=self._server_service),\n        ServerAddResourceTool(server_service=self._server_service),\n        ServerAddPromptTool(server_service=self._server_service),\n    ]\n\n    return server_tools\n</code></pre>"},{"location":"api/factory/#langchain_mcp_toolkit.factory.MCPToolFactory.get_tools_by_names","title":"<code>get_tools_by_names(names)</code>","text":"<p>Get tools by names</p> <p>Returns a list of tools matching the specified names. If a tool is not found, it will be skipped.</p> <p>Parameters:</p> Name Type Description Default <code>names</code> <code>list[str]</code> <p>List of tool names to retrieve</p> required <p>Returns:</p> Type Description <code>list[BaseTool]</code> <p>list[BaseTool]: List of found tools</p> Example <pre><code>factory = MCPToolFactory()\n\n# Initialize both services\nfactory.init_client_service()\nfactory.init_server_service()\n\n# Get all tools\nall_tools = factory.create_all_tools()\n\n# Use tools\nserver_start_tool = [t for t in all_tools if t.name == \"server_start\"][0]\nawait server_start_tool.invoke({\"host\": \"localhost\", \"port\": 8000})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/factory.py</code> <pre><code>def get_tools_by_names(self, names: list[str]) -&gt; list[BaseTool]:\n    \"\"\"\n    Get tools by names\n\n    Returns a list of tools matching the specified names.\n    If a tool is not found, it will be skipped.\n\n    Args:\n        names: List of tool names to retrieve\n\n    Returns:\n        list[BaseTool]: List of found tools\n\n    Example:\n        ```python\n        factory = MCPToolFactory()\n\n        # Initialize both services\n        factory.init_client_service()\n        factory.init_server_service()\n\n        # Get all tools\n        all_tools = factory.create_all_tools()\n\n        # Use tools\n        server_start_tool = [t for t in all_tools if t.name == \"server_start\"][0]\n        await server_start_tool.invoke({\"host\": \"localhost\", \"port\": 8000})\n        ```\n    \"\"\"\n    all_tools = self.create_all_tools()\n    result: list[BaseTool] = []\n\n    for name in names:\n        matching_tools = [tool for tool in all_tools if tool.name == name]\n        if matching_tools:\n            result.append(matching_tools[0])\n\n    return result\n</code></pre>"},{"location":"api/factory/#langchain_mcp_toolkit.factory.MCPToolFactory.init_client_service","title":"<code>init_client_service()</code>","text":"<p>Initialize client service</p> <p>Creates and initializes a new MCPClientService instance.</p> <p>Returns:</p> Name Type Description <code>MCPClientService</code> <code>MCPClientService</code> <p>Initialized client service instance</p> Example <pre><code>factory = MCPToolFactory()\nclient_service = factory.init_client_service()\n\n# Use client service\nawait client_service.create(\"http://localhost:8000\")\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/factory.py</code> <pre><code>def init_client_service(self) -&gt; MCPClientService:\n    \"\"\"\n    Initialize client service\n\n    Creates and initializes a new MCPClientService instance.\n\n    Returns:\n        MCPClientService: Initialized client service instance\n\n    Example:\n        ```python\n        factory = MCPToolFactory()\n        client_service = factory.init_client_service()\n\n        # Use client service\n        await client_service.create(\"http://localhost:8000\")\n        ```\n    \"\"\"\n    client_service = MCPClientService()\n    self._client_service = client_service\n    return client_service\n</code></pre>"},{"location":"api/factory/#langchain_mcp_toolkit.factory.MCPToolFactory.init_server_service","title":"<code>init_server_service()</code>","text":"<p>Initialize server service</p> <p>Creates and initializes a new MCPServerService instance.</p> <p>Returns:</p> Name Type Description <code>MCPServerService</code> <code>MCPServerService</code> <p>Initialized server service instance</p> Example <pre><code>factory = MCPToolFactory()\nserver_service = factory.init_server_service()\n\n# Use server service\nawait server_service.start(\"localhost\", 8000)\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/factory.py</code> <pre><code>def init_server_service(self) -&gt; MCPServerService:\n    \"\"\"\n    Initialize server service\n\n    Creates and initializes a new MCPServerService instance.\n\n    Returns:\n        MCPServerService: Initialized server service instance\n\n    Example:\n        ```python\n        factory = MCPToolFactory()\n        server_service = factory.init_server_service()\n\n        # Use server service\n        await server_service.start(\"localhost\", 8000)\n        ```\n    \"\"\"\n    server_service = MCPServerService()\n    self._server_service = server_service\n    return server_service\n</code></pre>"},{"location":"api/server_service/","title":"MCPServerService","text":"<p>Service class for managing MCP servers</p> <p>This class provides functionality for creating, starting and managing MCP servers, including adding tools, resources and prompts. Supports both synchronous and asynchronous operation interfaces, suitable for various environments.</p> <p>Attributes:</p> Name Type Description <code>_server</code> <code>Any</code> <p>MCP server instance</p> <code>_is_running</code> <code>bool</code> <p>Whether the server is running</p> <code>_host</code> <code>str</code> <p>Server host</p> <code>_port</code> <code>int</code> <p>Server port</p> Example <pre><code># Create server service\nserver_service = MCPServerService()\n\n# Start server\nserver_service.start(host=\"localhost\", port=8000)\n\n# Add tool\ncode = '''\ndef get_weather(city: str) -&gt; str:\n    '''Get weather information'''\n    # This is simulated weather information\n    return f\"The weather in {city} is sunny, temperature 25\u2103\"\n'''\nserver_service.add_tool(\"get_weather\", \"Get weather information\", code)\n\n# Stop server\nserver_service.stop()\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>class MCPServerService:\n    \"\"\"\n    Service class for managing MCP servers\n\n    This class provides functionality for creating, starting and managing MCP servers, including adding tools, resources and prompts.\n    Supports both synchronous and asynchronous operation interfaces, suitable for various environments.\n\n    Attributes:\n        _server: MCP server instance\n        _is_running: Whether the server is running\n        _host: Server host\n        _port: Server port\n\n    Example:\n        ```python\n        # Create server service\n        server_service = MCPServerService()\n\n        # Start server\n        server_service.start(host=\"localhost\", port=8000)\n\n        # Add tool\n        code = '''\n        def get_weather(city: str) -&gt; str:\n            '''Get weather information'''\n            # This is simulated weather information\n            return f\"The weather in {city} is sunny, temperature 25\u2103\"\n        '''\n        server_service.add_tool(\"get_weather\", \"Get weather information\", code)\n\n        # Stop server\n        server_service.stop()\n        ```\n    \"\"\"\n\n    def __init__(self, server_type: str | None = None):\n        \"\"\"\n        Initialize MCP server service\n\n        Create an MCP server service instance, server type can be specified.\n\n        Parameters:\n            server_type: Server type, optional. Default is None, using standard MCP server.\n\n        Exceptions:\n            RuntimeError: If server creation fails\n\n        Example:\n            ```python\n            # Create default server\n            server_service = MCPServerService()\n\n            # Create custom type server\n            server_service = MCPServerService(server_type=\"custom\")\n            ```\n        \"\"\"\n        self._is_running: bool = False\n        self._host: str = \"localhost\"\n        self._port: int = 8000\n        self._server: Any = None\n\n        try:\n            if server_type:\n                # Create custom type server\n                self._server = self._create_custom_server(server_type)\n            else:\n                # Create standard MCP server\n                self._server = MCPServerClass()\n        except Exception as e:\n            raise RuntimeError(f\"Failed to create MCP server: {str(e)}\") from e\n\n    @property\n    def server(self) -&gt; Any:\n        \"\"\"\n        Get MCP server instance\n\n        Get the current MCP server instance. If the server has not been created yet, a default server will be created automatically.\n\n        Returns:\n            Any: MCP server instance\n\n        Example:\n            ```python\n            server_service = MCPServerService()\n            # Get server instance\n            server = server_service.server\n            # Use server API directly\n            server.add_tool(...)\n            ```\n        \"\"\"\n        if self._server is None:\n            self._server = self._create_default_server()\n        return self._server\n\n    @server.setter\n    def server(self, value: Any) -&gt; None:\n        \"\"\"Set server instance\"\"\"\n        self._server = value\n\n    def _create_default_server(self) -&gt; Any:\n        \"\"\"\n        Create default MCP server\n\n        Internal method for creating default MCP server instance.\n\n        Returns:\n            Any: Default MCP server instance\n\n        Exceptions:\n            RuntimeError: If server creation fails\n        \"\"\"\n        try:\n            return MCPServerClass()\n        except Exception as e:\n            raise RuntimeError(f\"Failed to create default MCP server: {str(e)}\") from e\n\n    def _create_custom_server(self, server_type: str) -&gt; Any:\n        \"\"\"\n        Create custom type MCP server\n\n        Internal method for creating custom MCP server instance based on specified type.\n\n        Parameters:\n            server_type: Server type, such as \"fastmcp\", \"localmcp\", etc.\n\n        Returns:\n            Any: Custom type MCP server instance\n\n        Exceptions:\n            RuntimeError: If server creation fails or type not supported\n        \"\"\"\n        try:\n            if server_type.lower() == \"fastmcp\":\n                # Try to import and create FastMCP server\n                from mcp.server.fastmcp import FastMCP\n\n                return FastMCP()\n            elif server_type.lower() == \"localmcp\":\n                # Try to import and create LocalMCP server\n                from mcp.server.localmcp import LocalMCP  # type: ignore\n\n                return LocalMCP()\n            else:\n                raise ValueError(f\"Unsupported server type: {server_type}\")\n        except ImportError as e:\n            raise RuntimeError(f\"Failed to import server type '{server_type}': {str(e)}\") from e\n        except Exception as e:\n            raise RuntimeError(f\"Failed to create server type '{server_type}': {str(e)}\") from e\n\n    def start(self, host: str = \"localhost\", port: int = 8000) -&gt; str:\n        \"\"\"\n        Start MCP server\n\n        Start the server on specified host and port. If the server is already running, the current URL will be returned.\n\n        Parameters:\n            host: Server host address, default is \"localhost\"\n            port: Server port, default is 8000\n\n        Returns:\n            str: Server URL or status message\n\n        Exceptions:\n            RuntimeError: If starting server fails\n        \"\"\"\n        # Check if server is already running\n        if self._is_running:\n            return f\"Server is already running: http://{self._host}:{self._port}\"\n\n        try:\n            # Set server name and start\n            self._host = host\n            self._port = port\n            self._server.name = \"mcp-server\"\n            self._server.start(host=host, port=port)\n            self._is_running = True\n            return f\"Server started at http://{host}:{port}\"\n        except Exception as e:\n            raise RuntimeError(f\"Failed to start server: {str(e)}\") from e\n\n    def stop(self) -&gt; str:\n        \"\"\"\n        Stop MCP server\n\n        Stop the currently running MCP server. If the server is not running, a corresponding message is returned.\n\n        Returns:\n            str: Operation result message\n\n        Exceptions:\n            RuntimeError: If stopping server fails\n\n        Example:\n            ```python\n            server_service = MCPServerService()\n            server_service.start()\n\n            # Stop server\n            result = server_service.stop()\n            print(result)  # Output: Server stopped\n\n            # Try to stop again\n            result = server_service.stop()\n            print(result)  # Output: Server is not currently running\n            ```\n        \"\"\"\n        if not self._is_running:\n            return \"Server is not currently running\"\n\n        try:\n            self._server.stop()\n            self._is_running = False\n            return \"Server stopped\"\n        except Exception as e:\n            raise RuntimeError(f\"Failed to stop server: {str(e)}\") from e\n\n    def get_url(self) -&gt; str:\n        \"\"\"\n        Get MCP server URL\n\n        Get the URL of the currently running MCP server. If the server is not running, a corresponding message is returned.\n\n        Returns:\n            str: Server URL or status message\n\n        Exceptions:\n            RuntimeError: If getting URL fails\n\n        Example:\n            ```python\n            server_service = MCPServerService()\n\n            # Server not running\n            url = server_service.get_url()\n            print(url)  # Output: Server is not currently running\n\n            # After starting server\n            server_service.start()\n            url = server_service.get_url()\n            print(url)  # Output: http://localhost:8000\n            ```\n        \"\"\"\n        if not self._is_running:\n            return \"Server is not currently running\"\n\n        try:\n            url = self._server.get_url()\n            return url if url else f\"http://{self._host}:{self._port}\"\n        except Exception as e:\n            raise RuntimeError(f\"Failed to get server URL: {str(e)}\") from e\n\n    def add_tool(self, name: str, description: str, code: str, code_type: str = \"python\") -&gt; str:\n        \"\"\"\n        Add tool to MCP server\n\n        Compile and add a custom tool to the server. Code will be executed in a secure sandbox environment.\n\n        Parameters:\n            name: Tool name\n            description: Tool description\n            code: Tool code, should contain the implementation function\n            code_type: Tool code type, default is \"python\"\n\n        Returns:\n            str: Operation result message\n\n        Exceptions:\n            RuntimeError: If adding tool fails\n\n        Example:\n            ```python\n            server_service = MCPServerService()\n            server_service.start()\n\n            # Add a simple tool\n            code = '''\n            def get_greeting(name: str) -&gt; str:\n                '''Return greeting'''\n                return f\"Hello, {name}!\"\n            '''\n            result = server_service.add_tool(\"get_greeting\", \"Return greeting\", code)\n            print(result)  # Output: Tool 'get_greeting' added to server\n            ```\n        \"\"\"\n        if not self._is_running:\n            return \"Error: Server is not currently running, please start the server first\"\n\n        try:\n            # Dynamically compile tool code\n            tool_func = self._compile_tool_code(name, code)\n            self._server.add_tool(name, tool_func, description)\n            return f\"Tool '{name}' added to server\"\n        except Exception as e:\n            raise RuntimeError(f\"Failed to add tool: {str(e)}\") from e\n\n    def add_resource(self, name: str, content: Any, description: str = \"\") -&gt; str:\n        \"\"\"\n        Add resource to MCP server\n\n        Add a resource to the server, resource can be a string, dictionary or list.\n\n        Parameters:\n            name: Resource name\n            content: Resource content, can be a string, dictionary or list\n            description: Resource description, default is empty string\n\n        Returns:\n            str: Operation result message\n\n        Exceptions:\n            RuntimeError: If adding resource fails\n\n        Example:\n            ```python\n            server_service = MCPServerService()\n            server_service.start()\n\n            # Add string resource\n            result = server_service.add_resource(\n                \"greeting_template\",\n                \"Hello, {name}! Welcome to {product}.\",\n                \"Greeting template\"\n            )\n\n            # Add list resource\n            cities = [\"New York\", \"Los Angeles\", \"Chicago\", \"San Francisco\"]\n            result = server_service.add_resource(\"cities\", cities, \"Major US cities\")\n\n            # Add dictionary resource\n            weather_data = {\n                \"New York\": {\"temperature\": 25, \"condition\": \"Sunny\"},\n                \"Los Angeles\": {\"temperature\": 28, \"condition\": \"Cloudy\"}\n            }\n            result = server_service.add_resource(\"weather_data\", weather_data, \"City weather data\")\n            ```\n        \"\"\"\n        if not self._is_running:\n            return \"Error: Server is not currently running, please start the server first\"\n\n        try:\n            self._server.add_resource(name, content)\n            return f\"Resource '{name}' added to server\"\n        except Exception as e:\n            raise RuntimeError(f\"Failed to add resource: {str(e)}\") from e\n\n    def add_prompt(self, name: str, content: str, description: str = \"\") -&gt; str:\n        \"\"\"\n        Add prompt to MCP server\n\n        Add a prompt template to the server, can be used for generating text or building conversations.\n\n        Parameters:\n            name: Prompt name\n            content: Prompt content, can contain formatting placeholders\n            description: Prompt description, default is empty string\n\n        Returns:\n            str: Operation result message\n\n        Exceptions:\n            RuntimeError: If adding prompt fails\n\n        Example:\n            ```python\n            server_service = MCPServerService()\n            server_service.start()\n\n            # Add simple prompt\n            result = server_service.add_prompt(\n                \"weather_query\",\n                \"Please query the weather for {city}\",\n                \"Weather query template\"\n            )\n\n            # Add complex conversation prompt\n            conversation_prompt = '''\n            System: You are a weather assistant, you can answer questions about weather.\n            User: {query}\n            Assistant:\n            '''\n            result = server_service.add_prompt(\n                \"weather_assistant\",\n                conversation_prompt,\n                \"Weather assistant conversation template\"\n            )\n            ```\n        \"\"\"\n        if not self._is_running:\n            return \"Error: Server is not currently running, please start the server first\"\n\n        try:\n            self._server.add_prompt(name, content)\n            return f\"Prompt '{name}' added to server\"\n        except Exception as e:\n            raise RuntimeError(f\"Failed to add prompt: {str(e)}\") from e\n\n    def is_running(self) -&gt; bool:\n        \"\"\"\n        Check if server is running\n\n        Returns:\n            bool: True if server is running, False otherwise\n\n        Example:\n            ```python\n            server_service = MCPServerService()\n\n            # Check server status\n            if not server_service.is_running():\n                server_service.start()\n\n            # Use server\n            # ...\n\n            # Stop server when done\n            if server_service.is_running():\n                server_service.stop()\n            ```\n        \"\"\"\n        return self._is_running\n\n    async def async_start_server(self, host: str = \"localhost\", port: int = 8000) -&gt; str:\n        \"\"\"\n        Asynchronously start MCP server\n\n        Asynchronous version of the start method, for starting server in asynchronous environments.\n\n        Parameters:\n            host: Server host, default is localhost\n            port: Server port, default is 8000\n\n        Returns:\n            str: Server URL or status message\n\n        Exceptions:\n            RuntimeError: If starting server fails\n\n        Example:\n            ```python\n            import asyncio\n\n            async def run_server():\n                server_service = MCPServerService()\n\n                # Asynchronously start server\n                url = await server_service.async_start_server()\n                print(url)\n\n                # Use server\n                # ...\n\n                # Stop server when done\n                await server_service.async_stop_server()\n\n            asyncio.run(run_server())\n            ```\n        \"\"\"\n        return self.start(host, port)\n\n    async def async_stop_server(self) -&gt; str:\n        \"\"\"\n        Asynchronously stop MCP server\n\n        Asynchronous version of the stop method, for stopping server in asynchronous environments.\n\n        Returns:\n            str: Operation result message\n\n        Exceptions:\n            RuntimeError: If stopping server fails\n\n        Example:\n            ```python\n            import asyncio\n\n            async def run_server():\n                server_service = MCPServerService()\n                await server_service.async_start_server()\n\n                # Use server\n                # ...\n\n                # Stop server when done\n                result = await server_service.async_stop_server()\n                print(result)  # Output: Server stopped\n\n            asyncio.run(run_server())\n            ```\n        \"\"\"\n        return self.stop()\n\n    def _compile_tool_code(self, name: str, code_str: str) -&gt; Callable[..., Any]:\n        \"\"\"\n        Compile tool code\n\n        Compile code string into callable function object for adding to MCP server.\n\n        Parameters:\n            name: Tool function name\n            code_str: Tool code string\n\n        Returns:\n            Callable: Compiled function object\n\n        Exceptions:\n            SyntaxError: If code syntax is incorrect\n            Exception: Other compilation errors\n        \"\"\"\n        # Create a safe namespace\n        sandbox = {}\n        # Add built-in functions and types\n        for k, v in __builtins__.items():  # type: ignore\n            if k in safe_builtins:\n                sandbox[k] = v\n\n        sandbox[\"requests\"] = requests\n        sandbox[\"json\"] = json\n\n        # Construct function code\n        full_code = f\"def {name}(**kwargs):\\n{textwrap.indent(code_str, '    ')}\"\n\n        # Execute code\n        exec(full_code, sandbox)\n        return cast(Callable[..., Any], sandbox[name])\n\n    # Add asynchronous version of get_url method\n    async def async_get_url(self) -&gt; str:\n        \"\"\"\n        Asynchronously get server URL\n\n        Asynchronous version of the get_url method, for getting server URL in asynchronous environments.\n\n        Returns:\n            str: Server URL or status message\n\n        Exceptions:\n            RuntimeError: If getting URL fails\n\n        Example:\n            ```python\n            import asyncio\n\n            async def get_server_info():\n                server_service = MCPServerService()\n                await server_service.async_start_server()\n\n                # Asynchronously get URL\n                url = await server_service.async_get_url()\n                print(f\"Server running at: {url}\")\n\n                await server_service.async_stop_server()\n\n            asyncio.run(get_server_info())\n            ```\n        \"\"\"\n        return self.get_url()\n\n    # Add asynchronous version of add_tool method\n    async def async_add_tool(self, name: str, description: str, code: str, code_type: str = \"python\") -&gt; str:\n        \"\"\"\n        Asynchronously add tool to MCP server\n\n        Asynchronous version of the add_tool method, for adding tools in asynchronous environments.\n\n        Parameters:\n            name: Tool name\n            description: Tool description\n            code: Tool code, should contain the implementation function\n            code_type: Tool code type, default is \"python\"\n\n        Returns:\n            str: Operation result message\n\n        Exceptions:\n            RuntimeError: If adding tool fails\n\n        Example:\n            ```python\n            import asyncio\n\n            async def add_server_tool():\n                server_service = MCPServerService()\n                await server_service.async_start_server()\n\n                # Add a simple tool\n                code = '''\n                def get_greeting(name: str) -&gt; str:\n                    '''Return greeting'''\n                    return f\"Hello, {name}!\"\n                '''\n                result = await server_service.async_add_tool(\"get_greeting\", \"Return greeting\", code)\n                print(result)  # Output: Tool 'get_greeting' added to server\n\n                await server_service.async_stop_server()\n\n            asyncio.run(add_server_tool())\n            ```\n        \"\"\"\n        return self.add_tool(name, description, code, code_type)\n\n    # Add asynchronous version of add_resource method\n    async def async_add_resource(self, name: str, content: Any, description: str = \"\") -&gt; str:\n        \"\"\"\n        Asynchronously add resource to MCP server\n\n        Asynchronous version of the add_resource method, for adding resources in asynchronous environments.\n\n        Parameters:\n            name: Resource name\n            content: Resource content, can be a string, dictionary or list\n            description: Resource description, default is empty string\n\n        Returns:\n            str: Operation result message\n\n        Exceptions:\n            RuntimeError: If adding resource fails\n\n        Example:\n            ```python\n            import asyncio\n\n            async def add_server_resource():\n                server_service = MCPServerService()\n                await server_service.async_start_server()\n\n                # Add string resource\n                result = await server_service.async_add_resource(\n                    \"greeting_template\",\n                    \"Hello, {name}! Welcome to {product}.\",\n                    \"Greeting template\"\n                )\n                print(result)  # Output: Resource 'greeting_template' added to server\n\n                await server_service.async_stop_server()\n\n            asyncio.run(add_server_resource())\n            ```\n        \"\"\"\n        return self.add_resource(name, content, description)\n\n    # Add asynchronous version of add_prompt method\n    async def async_add_prompt(self, name: str, content: str, description: str = \"\") -&gt; str:\n        \"\"\"\n        Asynchronously add prompt to MCP server\n\n        Asynchronous version of the add_prompt method, for adding prompts in asynchronous environments.\n\n        Parameters:\n            name: Prompt name\n            content: Prompt content, can contain formatting placeholders\n            description: Prompt description, default is empty string\n\n        Returns:\n            str: Operation result message\n\n        Exceptions:\n            RuntimeError: If adding prompt fails\n\n        Example:\n            ```python\n            import asyncio\n\n            async def add_server_prompt():\n                server_service = MCPServerService()\n                await server_service.async_start_server()\n\n                # Add simple prompt\n                result = await server_service.async_add_prompt(\n                    \"weather_query\",\n                    \"Please query the weather for {city}\",\n                    \"Weather query template\"\n                )\n                print(result)  # Output: Prompt 'weather_query' added to server\n\n                await server_service.async_stop_server()\n\n            asyncio.run(add_server_prompt())\n            ```\n        \"\"\"\n        return self.add_prompt(name, content, description)\n\n    def add_example_resources(self) -&gt; None:\n        \"\"\"Add example resources\"\"\"\n        # Add city list\n        cities = [\"New York\", \"Los Angeles\", \"Chicago\", \"San Francisco\"]\n        result = self.add_resource(\"cities\", cities, \"Major US cities\")\n        if result:\n            print(f\"Resource added successfully: {result}\")\n\n        # Add weather data\n        weather_data = {\n            \"New York\": {\"temperature\": 25, \"condition\": \"Sunny\"},\n            \"Los Angeles\": {\"temperature\": 28, \"condition\": \"Cloudy\"}\n        }\n        self.add_resource(\"weather_data\", weather_data, \"City weather data\")\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.server","title":"<code>server</code>  <code>property</code> <code>writable</code>","text":"<p>Get MCP server instance</p> <p>Get the current MCP server instance. If the server has not been created yet, a default server will be created automatically.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>MCP server instance</p> Example <pre><code>server_service = MCPServerService()\n# Get server instance\nserver = server_service.server\n# Use server API directly\nserver.add_tool(...)\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.__init__","title":"<code>__init__(server_type=None)</code>","text":"<p>Initialize MCP server service</p> <p>Create an MCP server service instance, server type can be specified.</p> <p>Parameters:</p> Name Type Description Default <code>server_type</code> <code>str | None</code> <p>Server type, optional. Default is None, using standard MCP server.</p> <code>None</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If server creation fails</p> Example <pre><code># Create default server\nserver_service = MCPServerService()\n\n# Create custom type server\nserver_service = MCPServerService(server_type=\"custom\")\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>def __init__(self, server_type: str | None = None):\n    \"\"\"\n    Initialize MCP server service\n\n    Create an MCP server service instance, server type can be specified.\n\n    Parameters:\n        server_type: Server type, optional. Default is None, using standard MCP server.\n\n    Exceptions:\n        RuntimeError: If server creation fails\n\n    Example:\n        ```python\n        # Create default server\n        server_service = MCPServerService()\n\n        # Create custom type server\n        server_service = MCPServerService(server_type=\"custom\")\n        ```\n    \"\"\"\n    self._is_running: bool = False\n    self._host: str = \"localhost\"\n    self._port: int = 8000\n    self._server: Any = None\n\n    try:\n        if server_type:\n            # Create custom type server\n            self._server = self._create_custom_server(server_type)\n        else:\n            # Create standard MCP server\n            self._server = MCPServerClass()\n    except Exception as e:\n        raise RuntimeError(f\"Failed to create MCP server: {str(e)}\") from e\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.add_example_resources","title":"<code>add_example_resources()</code>","text":"<p>Add example resources</p> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>def add_example_resources(self) -&gt; None:\n    \"\"\"Add example resources\"\"\"\n    # Add city list\n    cities = [\"New York\", \"Los Angeles\", \"Chicago\", \"San Francisco\"]\n    result = self.add_resource(\"cities\", cities, \"Major US cities\")\n    if result:\n        print(f\"Resource added successfully: {result}\")\n\n    # Add weather data\n    weather_data = {\n        \"New York\": {\"temperature\": 25, \"condition\": \"Sunny\"},\n        \"Los Angeles\": {\"temperature\": 28, \"condition\": \"Cloudy\"}\n    }\n    self.add_resource(\"weather_data\", weather_data, \"City weather data\")\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.add_prompt","title":"<code>add_prompt(name, content, description='')</code>","text":"<p>Add prompt to MCP server</p> <p>Add a prompt template to the server, can be used for generating text or building conversations.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Prompt name</p> required <code>content</code> <code>str</code> <p>Prompt content, can contain formatting placeholders</p> required <code>description</code> <code>str</code> <p>Prompt description, default is empty string</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If adding prompt fails</p> Example <pre><code>server_service = MCPServerService()\nserver_service.start()\n\n# Add simple prompt\nresult = server_service.add_prompt(\n    \"weather_query\",\n    \"Please query the weather for {city}\",\n    \"Weather query template\"\n)\n\n# Add complex conversation prompt\nconversation_prompt = '''\nSystem: You are a weather assistant, you can answer questions about weather.\nUser: {query}\nAssistant:\n'''\nresult = server_service.add_prompt(\n    \"weather_assistant\",\n    conversation_prompt,\n    \"Weather assistant conversation template\"\n)\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>def add_prompt(self, name: str, content: str, description: str = \"\") -&gt; str:\n    \"\"\"\n    Add prompt to MCP server\n\n    Add a prompt template to the server, can be used for generating text or building conversations.\n\n    Parameters:\n        name: Prompt name\n        content: Prompt content, can contain formatting placeholders\n        description: Prompt description, default is empty string\n\n    Returns:\n        str: Operation result message\n\n    Exceptions:\n        RuntimeError: If adding prompt fails\n\n    Example:\n        ```python\n        server_service = MCPServerService()\n        server_service.start()\n\n        # Add simple prompt\n        result = server_service.add_prompt(\n            \"weather_query\",\n            \"Please query the weather for {city}\",\n            \"Weather query template\"\n        )\n\n        # Add complex conversation prompt\n        conversation_prompt = '''\n        System: You are a weather assistant, you can answer questions about weather.\n        User: {query}\n        Assistant:\n        '''\n        result = server_service.add_prompt(\n            \"weather_assistant\",\n            conversation_prompt,\n            \"Weather assistant conversation template\"\n        )\n        ```\n    \"\"\"\n    if not self._is_running:\n        return \"Error: Server is not currently running, please start the server first\"\n\n    try:\n        self._server.add_prompt(name, content)\n        return f\"Prompt '{name}' added to server\"\n    except Exception as e:\n        raise RuntimeError(f\"Failed to add prompt: {str(e)}\") from e\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.add_resource","title":"<code>add_resource(name, content, description='')</code>","text":"<p>Add resource to MCP server</p> <p>Add a resource to the server, resource can be a string, dictionary or list.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Resource name</p> required <code>content</code> <code>Any</code> <p>Resource content, can be a string, dictionary or list</p> required <code>description</code> <code>str</code> <p>Resource description, default is empty string</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If adding resource fails</p> Example <pre><code>server_service = MCPServerService()\nserver_service.start()\n\n# Add string resource\nresult = server_service.add_resource(\n    \"greeting_template\",\n    \"Hello, {name}! Welcome to {product}.\",\n    \"Greeting template\"\n)\n\n# Add list resource\ncities = [\"New York\", \"Los Angeles\", \"Chicago\", \"San Francisco\"]\nresult = server_service.add_resource(\"cities\", cities, \"Major US cities\")\n\n# Add dictionary resource\nweather_data = {\n    \"New York\": {\"temperature\": 25, \"condition\": \"Sunny\"},\n    \"Los Angeles\": {\"temperature\": 28, \"condition\": \"Cloudy\"}\n}\nresult = server_service.add_resource(\"weather_data\", weather_data, \"City weather data\")\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>def add_resource(self, name: str, content: Any, description: str = \"\") -&gt; str:\n    \"\"\"\n    Add resource to MCP server\n\n    Add a resource to the server, resource can be a string, dictionary or list.\n\n    Parameters:\n        name: Resource name\n        content: Resource content, can be a string, dictionary or list\n        description: Resource description, default is empty string\n\n    Returns:\n        str: Operation result message\n\n    Exceptions:\n        RuntimeError: If adding resource fails\n\n    Example:\n        ```python\n        server_service = MCPServerService()\n        server_service.start()\n\n        # Add string resource\n        result = server_service.add_resource(\n            \"greeting_template\",\n            \"Hello, {name}! Welcome to {product}.\",\n            \"Greeting template\"\n        )\n\n        # Add list resource\n        cities = [\"New York\", \"Los Angeles\", \"Chicago\", \"San Francisco\"]\n        result = server_service.add_resource(\"cities\", cities, \"Major US cities\")\n\n        # Add dictionary resource\n        weather_data = {\n            \"New York\": {\"temperature\": 25, \"condition\": \"Sunny\"},\n            \"Los Angeles\": {\"temperature\": 28, \"condition\": \"Cloudy\"}\n        }\n        result = server_service.add_resource(\"weather_data\", weather_data, \"City weather data\")\n        ```\n    \"\"\"\n    if not self._is_running:\n        return \"Error: Server is not currently running, please start the server first\"\n\n    try:\n        self._server.add_resource(name, content)\n        return f\"Resource '{name}' added to server\"\n    except Exception as e:\n        raise RuntimeError(f\"Failed to add resource: {str(e)}\") from e\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.add_tool","title":"<code>add_tool(name, description, code, code_type='python')</code>","text":"<p>Add tool to MCP server</p> <p>Compile and add a custom tool to the server. Code will be executed in a secure sandbox environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Tool name</p> required <code>description</code> <code>str</code> <p>Tool description</p> required <code>code</code> <code>str</code> <p>Tool code, should contain the implementation function</p> required <code>code_type</code> <code>str</code> <p>Tool code type, default is \"python\"</p> <code>'python'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If adding tool fails</p> Example <pre><code>server_service = MCPServerService()\nserver_service.start()\n\n# Add a simple tool\ncode = '''\ndef get_greeting(name: str) -&gt; str:\n    '''Return greeting'''\n    return f\"Hello, {name}!\"\n'''\nresult = server_service.add_tool(\"get_greeting\", \"Return greeting\", code)\nprint(result)  # Output: Tool 'get_greeting' added to server\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>def add_tool(self, name: str, description: str, code: str, code_type: str = \"python\") -&gt; str:\n    \"\"\"\n    Add tool to MCP server\n\n    Compile and add a custom tool to the server. Code will be executed in a secure sandbox environment.\n\n    Parameters:\n        name: Tool name\n        description: Tool description\n        code: Tool code, should contain the implementation function\n        code_type: Tool code type, default is \"python\"\n\n    Returns:\n        str: Operation result message\n\n    Exceptions:\n        RuntimeError: If adding tool fails\n\n    Example:\n        ```python\n        server_service = MCPServerService()\n        server_service.start()\n\n        # Add a simple tool\n        code = '''\n        def get_greeting(name: str) -&gt; str:\n            '''Return greeting'''\n            return f\"Hello, {name}!\"\n        '''\n        result = server_service.add_tool(\"get_greeting\", \"Return greeting\", code)\n        print(result)  # Output: Tool 'get_greeting' added to server\n        ```\n    \"\"\"\n    if not self._is_running:\n        return \"Error: Server is not currently running, please start the server first\"\n\n    try:\n        # Dynamically compile tool code\n        tool_func = self._compile_tool_code(name, code)\n        self._server.add_tool(name, tool_func, description)\n        return f\"Tool '{name}' added to server\"\n    except Exception as e:\n        raise RuntimeError(f\"Failed to add tool: {str(e)}\") from e\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.async_add_prompt","title":"<code>async_add_prompt(name, content, description='')</code>  <code>async</code>","text":"<p>Asynchronously add prompt to MCP server</p> <p>Asynchronous version of the add_prompt method, for adding prompts in asynchronous environments.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Prompt name</p> required <code>content</code> <code>str</code> <p>Prompt content, can contain formatting placeholders</p> required <code>description</code> <code>str</code> <p>Prompt description, default is empty string</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If adding prompt fails</p> Example <pre><code>import asyncio\n\nasync def add_server_prompt():\n    server_service = MCPServerService()\n    await server_service.async_start_server()\n\n    # Add simple prompt\n    result = await server_service.async_add_prompt(\n        \"weather_query\",\n        \"Please query the weather for {city}\",\n        \"Weather query template\"\n    )\n    print(result)  # Output: Prompt 'weather_query' added to server\n\n    await server_service.async_stop_server()\n\nasyncio.run(add_server_prompt())\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>async def async_add_prompt(self, name: str, content: str, description: str = \"\") -&gt; str:\n    \"\"\"\n    Asynchronously add prompt to MCP server\n\n    Asynchronous version of the add_prompt method, for adding prompts in asynchronous environments.\n\n    Parameters:\n        name: Prompt name\n        content: Prompt content, can contain formatting placeholders\n        description: Prompt description, default is empty string\n\n    Returns:\n        str: Operation result message\n\n    Exceptions:\n        RuntimeError: If adding prompt fails\n\n    Example:\n        ```python\n        import asyncio\n\n        async def add_server_prompt():\n            server_service = MCPServerService()\n            await server_service.async_start_server()\n\n            # Add simple prompt\n            result = await server_service.async_add_prompt(\n                \"weather_query\",\n                \"Please query the weather for {city}\",\n                \"Weather query template\"\n            )\n            print(result)  # Output: Prompt 'weather_query' added to server\n\n            await server_service.async_stop_server()\n\n        asyncio.run(add_server_prompt())\n        ```\n    \"\"\"\n    return self.add_prompt(name, content, description)\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.async_add_resource","title":"<code>async_add_resource(name, content, description='')</code>  <code>async</code>","text":"<p>Asynchronously add resource to MCP server</p> <p>Asynchronous version of the add_resource method, for adding resources in asynchronous environments.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Resource name</p> required <code>content</code> <code>Any</code> <p>Resource content, can be a string, dictionary or list</p> required <code>description</code> <code>str</code> <p>Resource description, default is empty string</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If adding resource fails</p> Example <pre><code>import asyncio\n\nasync def add_server_resource():\n    server_service = MCPServerService()\n    await server_service.async_start_server()\n\n    # Add string resource\n    result = await server_service.async_add_resource(\n        \"greeting_template\",\n        \"Hello, {name}! Welcome to {product}.\",\n        \"Greeting template\"\n    )\n    print(result)  # Output: Resource 'greeting_template' added to server\n\n    await server_service.async_stop_server()\n\nasyncio.run(add_server_resource())\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>async def async_add_resource(self, name: str, content: Any, description: str = \"\") -&gt; str:\n    \"\"\"\n    Asynchronously add resource to MCP server\n\n    Asynchronous version of the add_resource method, for adding resources in asynchronous environments.\n\n    Parameters:\n        name: Resource name\n        content: Resource content, can be a string, dictionary or list\n        description: Resource description, default is empty string\n\n    Returns:\n        str: Operation result message\n\n    Exceptions:\n        RuntimeError: If adding resource fails\n\n    Example:\n        ```python\n        import asyncio\n\n        async def add_server_resource():\n            server_service = MCPServerService()\n            await server_service.async_start_server()\n\n            # Add string resource\n            result = await server_service.async_add_resource(\n                \"greeting_template\",\n                \"Hello, {name}! Welcome to {product}.\",\n                \"Greeting template\"\n            )\n            print(result)  # Output: Resource 'greeting_template' added to server\n\n            await server_service.async_stop_server()\n\n        asyncio.run(add_server_resource())\n        ```\n    \"\"\"\n    return self.add_resource(name, content, description)\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.async_add_tool","title":"<code>async_add_tool(name, description, code, code_type='python')</code>  <code>async</code>","text":"<p>Asynchronously add tool to MCP server</p> <p>Asynchronous version of the add_tool method, for adding tools in asynchronous environments.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Tool name</p> required <code>description</code> <code>str</code> <p>Tool description</p> required <code>code</code> <code>str</code> <p>Tool code, should contain the implementation function</p> required <code>code_type</code> <code>str</code> <p>Tool code type, default is \"python\"</p> <code>'python'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If adding tool fails</p> Example <pre><code>import asyncio\n\nasync def add_server_tool():\n    server_service = MCPServerService()\n    await server_service.async_start_server()\n\n    # Add a simple tool\n    code = '''\n    def get_greeting(name: str) -&gt; str:\n        '''Return greeting'''\n        return f\"Hello, {name}!\"\n    '''\n    result = await server_service.async_add_tool(\"get_greeting\", \"Return greeting\", code)\n    print(result)  # Output: Tool 'get_greeting' added to server\n\n    await server_service.async_stop_server()\n\nasyncio.run(add_server_tool())\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>async def async_add_tool(self, name: str, description: str, code: str, code_type: str = \"python\") -&gt; str:\n    \"\"\"\n    Asynchronously add tool to MCP server\n\n    Asynchronous version of the add_tool method, for adding tools in asynchronous environments.\n\n    Parameters:\n        name: Tool name\n        description: Tool description\n        code: Tool code, should contain the implementation function\n        code_type: Tool code type, default is \"python\"\n\n    Returns:\n        str: Operation result message\n\n    Exceptions:\n        RuntimeError: If adding tool fails\n\n    Example:\n        ```python\n        import asyncio\n\n        async def add_server_tool():\n            server_service = MCPServerService()\n            await server_service.async_start_server()\n\n            # Add a simple tool\n            code = '''\n            def get_greeting(name: str) -&gt; str:\n                '''Return greeting'''\n                return f\"Hello, {name}!\"\n            '''\n            result = await server_service.async_add_tool(\"get_greeting\", \"Return greeting\", code)\n            print(result)  # Output: Tool 'get_greeting' added to server\n\n            await server_service.async_stop_server()\n\n        asyncio.run(add_server_tool())\n        ```\n    \"\"\"\n    return self.add_tool(name, description, code, code_type)\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.async_get_url","title":"<code>async_get_url()</code>  <code>async</code>","text":"<p>Asynchronously get server URL</p> <p>Asynchronous version of the get_url method, for getting server URL in asynchronous environments.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Server URL or status message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If getting URL fails</p> Example <pre><code>import asyncio\n\nasync def get_server_info():\n    server_service = MCPServerService()\n    await server_service.async_start_server()\n\n    # Asynchronously get URL\n    url = await server_service.async_get_url()\n    print(f\"Server running at: {url}\")\n\n    await server_service.async_stop_server()\n\nasyncio.run(get_server_info())\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>async def async_get_url(self) -&gt; str:\n    \"\"\"\n    Asynchronously get server URL\n\n    Asynchronous version of the get_url method, for getting server URL in asynchronous environments.\n\n    Returns:\n        str: Server URL or status message\n\n    Exceptions:\n        RuntimeError: If getting URL fails\n\n    Example:\n        ```python\n        import asyncio\n\n        async def get_server_info():\n            server_service = MCPServerService()\n            await server_service.async_start_server()\n\n            # Asynchronously get URL\n            url = await server_service.async_get_url()\n            print(f\"Server running at: {url}\")\n\n            await server_service.async_stop_server()\n\n        asyncio.run(get_server_info())\n        ```\n    \"\"\"\n    return self.get_url()\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.async_start_server","title":"<code>async_start_server(host='localhost', port=8000)</code>  <code>async</code>","text":"<p>Asynchronously start MCP server</p> <p>Asynchronous version of the start method, for starting server in asynchronous environments.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Server host, default is localhost</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>Server port, default is 8000</p> <code>8000</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Server URL or status message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If starting server fails</p> Example <pre><code>import asyncio\n\nasync def run_server():\n    server_service = MCPServerService()\n\n    # Asynchronously start server\n    url = await server_service.async_start_server()\n    print(url)\n\n    # Use server\n    # ...\n\n    # Stop server when done\n    await server_service.async_stop_server()\n\nasyncio.run(run_server())\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>async def async_start_server(self, host: str = \"localhost\", port: int = 8000) -&gt; str:\n    \"\"\"\n    Asynchronously start MCP server\n\n    Asynchronous version of the start method, for starting server in asynchronous environments.\n\n    Parameters:\n        host: Server host, default is localhost\n        port: Server port, default is 8000\n\n    Returns:\n        str: Server URL or status message\n\n    Exceptions:\n        RuntimeError: If starting server fails\n\n    Example:\n        ```python\n        import asyncio\n\n        async def run_server():\n            server_service = MCPServerService()\n\n            # Asynchronously start server\n            url = await server_service.async_start_server()\n            print(url)\n\n            # Use server\n            # ...\n\n            # Stop server when done\n            await server_service.async_stop_server()\n\n        asyncio.run(run_server())\n        ```\n    \"\"\"\n    return self.start(host, port)\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.async_stop_server","title":"<code>async_stop_server()</code>  <code>async</code>","text":"<p>Asynchronously stop MCP server</p> <p>Asynchronous version of the stop method, for stopping server in asynchronous environments.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If stopping server fails</p> Example <pre><code>import asyncio\n\nasync def run_server():\n    server_service = MCPServerService()\n    await server_service.async_start_server()\n\n    # Use server\n    # ...\n\n    # Stop server when done\n    result = await server_service.async_stop_server()\n    print(result)  # Output: Server stopped\n\nasyncio.run(run_server())\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>async def async_stop_server(self) -&gt; str:\n    \"\"\"\n    Asynchronously stop MCP server\n\n    Asynchronous version of the stop method, for stopping server in asynchronous environments.\n\n    Returns:\n        str: Operation result message\n\n    Exceptions:\n        RuntimeError: If stopping server fails\n\n    Example:\n        ```python\n        import asyncio\n\n        async def run_server():\n            server_service = MCPServerService()\n            await server_service.async_start_server()\n\n            # Use server\n            # ...\n\n            # Stop server when done\n            result = await server_service.async_stop_server()\n            print(result)  # Output: Server stopped\n\n        asyncio.run(run_server())\n        ```\n    \"\"\"\n    return self.stop()\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.get_url","title":"<code>get_url()</code>","text":"<p>Get MCP server URL</p> <p>Get the URL of the currently running MCP server. If the server is not running, a corresponding message is returned.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Server URL or status message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If getting URL fails</p> Example <pre><code>server_service = MCPServerService()\n\n# Server not running\nurl = server_service.get_url()\nprint(url)  # Output: Server is not currently running\n\n# After starting server\nserver_service.start()\nurl = server_service.get_url()\nprint(url)  # Output: http://localhost:8000\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>def get_url(self) -&gt; str:\n    \"\"\"\n    Get MCP server URL\n\n    Get the URL of the currently running MCP server. If the server is not running, a corresponding message is returned.\n\n    Returns:\n        str: Server URL or status message\n\n    Exceptions:\n        RuntimeError: If getting URL fails\n\n    Example:\n        ```python\n        server_service = MCPServerService()\n\n        # Server not running\n        url = server_service.get_url()\n        print(url)  # Output: Server is not currently running\n\n        # After starting server\n        server_service.start()\n        url = server_service.get_url()\n        print(url)  # Output: http://localhost:8000\n        ```\n    \"\"\"\n    if not self._is_running:\n        return \"Server is not currently running\"\n\n    try:\n        url = self._server.get_url()\n        return url if url else f\"http://{self._host}:{self._port}\"\n    except Exception as e:\n        raise RuntimeError(f\"Failed to get server URL: {str(e)}\") from e\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.is_running","title":"<code>is_running()</code>","text":"<p>Check if server is running</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if server is running, False otherwise</p> Example <pre><code>server_service = MCPServerService()\n\n# Check server status\nif not server_service.is_running():\n    server_service.start()\n\n# Use server\n# ...\n\n# Stop server when done\nif server_service.is_running():\n    server_service.stop()\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>def is_running(self) -&gt; bool:\n    \"\"\"\n    Check if server is running\n\n    Returns:\n        bool: True if server is running, False otherwise\n\n    Example:\n        ```python\n        server_service = MCPServerService()\n\n        # Check server status\n        if not server_service.is_running():\n            server_service.start()\n\n        # Use server\n        # ...\n\n        # Stop server when done\n        if server_service.is_running():\n            server_service.stop()\n        ```\n    \"\"\"\n    return self._is_running\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.start","title":"<code>start(host='localhost', port=8000)</code>","text":"<p>Start MCP server</p> <p>Start the server on specified host and port. If the server is already running, the current URL will be returned.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Server host address, default is \"localhost\"</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>Server port, default is 8000</p> <code>8000</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Server URL or status message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If starting server fails</p> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>def start(self, host: str = \"localhost\", port: int = 8000) -&gt; str:\n    \"\"\"\n    Start MCP server\n\n    Start the server on specified host and port. If the server is already running, the current URL will be returned.\n\n    Parameters:\n        host: Server host address, default is \"localhost\"\n        port: Server port, default is 8000\n\n    Returns:\n        str: Server URL or status message\n\n    Exceptions:\n        RuntimeError: If starting server fails\n    \"\"\"\n    # Check if server is already running\n    if self._is_running:\n        return f\"Server is already running: http://{self._host}:{self._port}\"\n\n    try:\n        # Set server name and start\n        self._host = host\n        self._port = port\n        self._server.name = \"mcp-server\"\n        self._server.start(host=host, port=port)\n        self._is_running = True\n        return f\"Server started at http://{host}:{port}\"\n    except Exception as e:\n        raise RuntimeError(f\"Failed to start server: {str(e)}\") from e\n</code></pre>"},{"location":"api/server_service/#langchain_mcp_toolkit.services.server_service.MCPServerService.stop","title":"<code>stop()</code>","text":"<p>Stop MCP server</p> <p>Stop the currently running MCP server. If the server is not running, a corresponding message is returned.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Operation result message</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If stopping server fails</p> Example <pre><code>server_service = MCPServerService()\nserver_service.start()\n\n# Stop server\nresult = server_service.stop()\nprint(result)  # Output: Server stopped\n\n# Try to stop again\nresult = server_service.stop()\nprint(result)  # Output: Server is not currently running\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/services/server_service.py</code> <pre><code>def stop(self) -&gt; str:\n    \"\"\"\n    Stop MCP server\n\n    Stop the currently running MCP server. If the server is not running, a corresponding message is returned.\n\n    Returns:\n        str: Operation result message\n\n    Exceptions:\n        RuntimeError: If stopping server fails\n\n    Example:\n        ```python\n        server_service = MCPServerService()\n        server_service.start()\n\n        # Stop server\n        result = server_service.stop()\n        print(result)  # Output: Server stopped\n\n        # Try to stop again\n        result = server_service.stop()\n        print(result)  # Output: Server is not currently running\n        ```\n    \"\"\"\n    if not self._is_running:\n        return \"Server is not currently running\"\n\n    try:\n        self._server.stop()\n        self._is_running = False\n        return \"Server stopped\"\n    except Exception as e:\n        raise RuntimeError(f\"Failed to stop server: {str(e)}\") from e\n</code></pre>"},{"location":"api/toolkit/","title":"MCPToolkit","text":"<p>               Bases: <code>BaseToolkit</code></p> <p>MCP Toolkit for creating and managing MCP tool collections</p> <p>This class is the main entry point for agent-mcp-toolkit, providing a unified interface for creating and managing MCP tools. Depending on the mode, it can create client tools, server tools, or a combination of both.</p> <p>Attributes:</p> Name Type Description <code>mode</code> <code>Literal['client', 'server', 'client_and_server']</code> <p>Toolkit mode, options are \"client\", \"server\", or \"client_and_server\"</p> <code>factory</code> <code>MCPToolFactory</code> <p>MCP tool factory instance, used for creating various MCP tools</p> <code>adapter</code> <code>MCPAdapterService</code> <p>MCP adapter service instance, used for integration with LangChain</p> Example <pre><code># Create a toolkit with both client and server tools\ntoolkit = MCPToolkit()\n\n# Create a toolkit with only client tools\nclient_toolkit = MCPToolkit(mode=\"client\")\n\n# Create a toolkit with only server tools\nserver_toolkit = MCPToolkit(mode=\"server\")\n\n# Get all tools in the toolkit\ntools = toolkit.get_tools()\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>class MCPToolkit(BaseToolkit):\n    \"\"\"\n    MCP Toolkit for creating and managing MCP tool collections\n\n    This class is the main entry point for agent-mcp-toolkit, providing a unified interface for creating and managing MCP tools.\n    Depending on the mode, it can create client tools, server tools, or a combination of both.\n\n    Attributes:\n        mode: Toolkit mode, options are \"client\", \"server\", or \"client_and_server\"\n        factory: MCP tool factory instance, used for creating various MCP tools\n        adapter: MCP adapter service instance, used for integration with LangChain\n\n    Example:\n        ```python\n        # Create a toolkit with both client and server tools\n        toolkit = MCPToolkit()\n\n        # Create a toolkit with only client tools\n        client_toolkit = MCPToolkit(mode=\"client\")\n\n        # Create a toolkit with only server tools\n        server_toolkit = MCPToolkit(mode=\"server\")\n\n        # Get all tools in the toolkit\n        tools = toolkit.get_tools()\n        ```\n    \"\"\"\n\n    mode: Literal[\"client\", \"server\", \"client_and_server\"] = Field(\n        default=\"client_and_server\",\n        description=\"Toolkit mode, supports 'client', 'server', and 'client_and_server'\",\n    )\n    factory: MCPToolFactory = Field(default_factory=MCPToolFactory)\n    adapter: MCPAdapterService = Field(default_factory=MCPAdapterService)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, **data: Any) -&gt; None:\n        \"\"\"\n        Initialize the MCP toolkit\n\n        Initializes the appropriate client and server services based on the specified mode.\n\n        Parameters:\n            **data: Parameters passed to the parent class constructor\n\n        Note:\n            If the mode includes \"client\", the client service will be initialized\n            If the mode includes \"server\", the server service will be initialized\n        \"\"\"\n        super().__init__(**data)\n\n        # Initialize services based on mode\n        if self.mode in [\"client\", \"client_and_server\"]:\n            self.factory.init_client_service()\n\n        if self.mode in [\"server\", \"client_and_server\"]:\n            self.factory.init_server_service()\n\n    def get_tools(self) -&gt; list[BaseTool]:\n        \"\"\"\n        Get all tools in the toolkit\n\n        Returns the appropriate tool collection based on the current mode.\n        - client mode: returns client tools\n        - server mode: returns server tools\n        - client_and_server mode: returns all tools\n\n        Returns:\n            list[BaseTool]: List of tools, can be used directly to create an Agent\n\n        Example:\n            ```python\n            toolkit = MCPToolkit()\n            tools = toolkit.get_tools()\n            agent = create_react_agent(model, tools)\n            ```\n        \"\"\"\n        if self.mode == \"client\":\n            return self.factory.create_client_tools()\n        elif self.mode == \"server\":\n            return self.factory.create_server_tools()\n        else:  # client_and_server\n            return self.factory.create_all_tools()\n\n    def get_client_service(self) -&gt; MCPClientService:\n        \"\"\"\n        Get the client service instance\n\n        This method provides access to the underlying client service, allowing direct interaction with MCP servers.\n\n        Returns:\n            MCPClientService: Client service instance\n\n        Exceptions:\n            ValueError: If the current mode does not support client services (i.e., mode is \"server\")\n\n        Example:\n            ```python\n            toolkit = MCPToolkit()\n            client_service = toolkit.get_client_service()\n\n            # Create client connection\n            client_service.create(\"http://localhost:8000\", \"sse\")\n            await client_service.connect()\n\n            # Call tool\n            result = await client_service.call_tool(\"default\", \"my_tool\", argument=\"value\")\n            ```\n        \"\"\"\n        if self.mode not in [\"client\", \"client_and_server\"]:\n            raise ValueError(f\"Current mode '{self.mode}' does not support client services\")\n\n        # Ensure client_service is not None\n        if self.factory.client_service is None:\n            self.factory.init_client_service()\n        assert self.factory.client_service is not None, \"Could not initialize client service\"\n        return self.factory.client_service\n\n    def get_server_service(self) -&gt; MCPServerService:\n        \"\"\"\n        Get the server service instance\n\n        This method provides access to the underlying server service, allowing management of MCP servers.\n\n        Returns:\n            MCPServerService: Server service instance\n\n        Exceptions:\n            ValueError: If the current mode does not support server services (i.e., mode is \"client\")\n\n        Example:\n            ```python\n            toolkit = MCPToolkit()\n            server_service = toolkit.get_server_service()\n\n            # Start server\n            await server_service.start(name=\"MyServer\", port=8000)\n\n            # Add tool\n            tool_code = \"def my_tool(): return 'Hello, world!'\"\n            await server_service.add_tool(\"my_tool\", \"Example tool\", tool_code)\n            ```\n        \"\"\"\n        if self.mode not in [\"server\", \"client_and_server\"]:\n            raise ValueError(f\"Current mode '{self.mode}' does not support server services\")\n\n        # Ensure server_service is not None\n        if self.factory.server_service is None:\n            self.factory.init_server_service()\n        assert self.factory.server_service is not None, \"Could not initialize server service\"\n        return self.factory.server_service\n\n    def get_tools_by_names(self, names: list[str]) -&gt; list[BaseTool]:\n        \"\"\"\n        Get tools by their names\n\n        Allows selective retrieval of specific tools from the toolkit.\n\n        Parameters:\n            names: List of tool names\n\n        Returns:\n            list[BaseTool]: List of tool instances\n\n        Example:\n            ```python\n            toolkit = MCPToolkit()\n            # Only get tools for starting server and creating client\n            specific_tools = toolkit.get_tools_by_names([\"mcp_start_server\", \"mcp_create_client\"])\n            ```\n        \"\"\"\n        return self.factory.get_tools_by_names(names)\n\n    @classmethod\n    def from_client(cls) -&gt; \"MCPToolkit\":\n        \"\"\"\n        Create toolkit from client\n\n        Creates a toolkit that only contains client tools.\n\n        Returns:\n            MCPToolkit: Toolkit instance\n\n        Example:\n            ```python\n            client_toolkit = MCPToolkit.from_client()\n            client_tools = client_toolkit.get_tools()\n            ```\n        \"\"\"\n        return cls(mode=\"client\")\n\n    @classmethod\n    def from_server(cls) -&gt; \"MCPToolkit\":\n        \"\"\"\n        Create toolkit from server\n\n        Creates a toolkit that only contains server tools.\n\n        Returns:\n            MCPToolkit: Toolkit instance\n\n        Example:\n            ```python\n            server_toolkit = MCPToolkit.from_server()\n            server_tools = server_toolkit.get_tools()\n            ```\n        \"\"\"\n        return cls(mode=\"server\")\n\n    @classmethod\n    def from_server_and_api_key(cls, server_url: str, api_key: str | None = None, **kwargs: Any) -&gt; \"MCPToolkit\":\n        \"\"\"\n        Create toolkit from server and API key\n\n        Creates a toolkit containing both server and client tools, and sets up the server and API key.\n        This is a convenient method for creating a complete toolkit.\n\n        Parameters:\n            server_url: Server URL\n            api_key: OpenAI API key, optional\n            **kwargs: Other parameters\n\n        Returns:\n            MCPToolkit: Toolkit instance\n\n        Example:\n            ```python\n            # Create a toolkit with server and client\n            toolkit = MCPToolkit.from_server_and_api_key(\n                server_url=\"http://localhost:8000/sse\",\n                api_key=\"your-openai-api-key\"\n            )\n            ```\n        \"\"\"\n        # Set API key\n        if api_key:\n            from os import environ\n            environ[\"OPENAI_API_KEY\"] = api_key\n\n        # Use direct call to constructor to create instance\n        return MCPToolkit(\n            mode=\"client\",\n            server_url=server_url,\n            api_key=api_key,\n            **kwargs\n        )\n\n    @classmethod\n    def from_api_key(cls, api_key: str, **kwargs: Any) -&gt; \"MCPToolkit\":\n        \"\"\"\n        Create toolkit from API key\n\n        Creates a toolkit that only contains client tools, and sets the API key.\n\n        Parameters:\n            api_key: OpenAI API key\n            **kwargs: Other parameters\n\n        Returns:\n            MCPToolkit: Toolkit instance\n\n        Example:\n            ```python\n            client_toolkit = MCPToolkit.from_api_key(api_key=\"sk-...\")\n            ```\n        \"\"\"\n        # Set OpenAI API key\n        from os import environ\n        environ[\"OPENAI_API_KEY\"] = api_key\n\n        # Use direct call to constructor to create instance\n        return MCPToolkit(\n            mode=\"client\",\n            api_key=api_key,\n            **kwargs\n        )\n\n    async def get_langchain_tools(self) -&gt; list[BaseTool]:\n        \"\"\"\n        Get current client service LangChain tools\n\n        Converts MCP server tools to LangChain format tools.\n\n        Returns:\n            list[BaseTool]: LangChain tool list\n\n        Exceptions:\n            ValueError: If mode does not support client or client is not connected\n\n        Example:\n            ```python\n            toolkit = MCPToolkit(mode=\"client\")\n            client_service = toolkit.get_client_service()\n            client_service.create(\"http://localhost:8000\", \"sse\")\n            await client_service.connect()\n\n            # Get LangChain tools\n            lc_tools = await toolkit.get_langchain_tools()\n            ```\n        \"\"\"\n        client_service = self.get_client_service()\n        return await MCPAdapterService.load_tools_from_session(client_service.client)\n\n    async def get_tools_from_multiple_servers(self, server_urls: dict[str, str]) -&gt; list[BaseTool]:\n        \"\"\"\n        Get LangChain tools from multiple servers\n\n        Connects to multiple MCP servers and gets tools from all servers.\n\n        Parameters:\n            server_urls: Server URL dictionary, format is {\"server_name\": \"http://localhost:8000\"}\n\n        Returns:\n            list[BaseTool]: All server LangChain tool list\n\n        Example:\n            ```python\n            toolkit = MCPToolkit()\n\n            # Get tools from multiple servers\n            server_urls = {\n                \"weather\": \"http://localhost:8000\",\n                \"news\": \"http://localhost:8001\"\n            }\n            tools = await toolkit.get_tools_from_multiple_servers(server_urls)\n            ```\n        \"\"\"\n        server_configs = {\n            name: {\"url\": url, \"transport\": \"sse\"} for name, url in server_urls.items()\n        }\n        client = await MCPAdapterService.create_multi_server_client(server_configs)\n        return await MCPAdapterService.load_tools_from_session(client)\n\n    async def create_multi_server_client(self, server_urls: dict[str, str]) -&gt; Any:\n        \"\"\"\n        Create multi-server MCP client\n\n        Creates a client that connects to multiple MCP servers.\n\n        Parameters:\n            server_urls: Server URL dictionary, format is {\"server_name\": \"http://localhost:8000\"}\n\n        Returns:\n            MultiServerMCPClient: Multi-server client instance\n\n        Example:\n            ```python\n            toolkit = MCPToolkit()\n\n            server_urls = {\n                \"weather\": \"http://localhost:8000\",\n                \"news\": \"http://localhost:8001\"\n            }\n            multi_client = await toolkit.create_multi_server_client(server_urls)\n\n            # Connect to all servers\n            await multi_client.connect()\n            ```\n        \"\"\"\n        # Convert simple URL dictionary to required format\n        server_configs = {\n            name: {\"url\": url, \"transport\": \"sse\"} for name, url in server_urls.items()\n        }\n        return await MCPAdapterService.create_multi_server_client(server_configs)\n\n    async def load_prompt(\n        self, prompt_name: str, arguments: dict[str, Any] | None = None\n    ) -&gt; list[HumanMessage | AIMessage]:\n        \"\"\"\n        Load MCP prompt and convert to LangChain messages\n\n        Loads prompt from MCP server and converts it to LangChain format message list.\n\n        Parameters:\n            prompt_name: Prompt name\n            arguments: Prompt parameters, optional\n\n        Returns:\n            list[HumanMessage | AIMessage]: LangChain message list\n\n        Exceptions:\n            ValueError: If mode does not support client or client is not connected\n\n        Example:\n            ```python\n            toolkit = MCPToolkit(mode=\"client\")\n            client_service = toolkit.get_client_service()\n            client_service.create(\"http://localhost:8000\", \"sse\")\n            await client_service.connect()\n\n            # Load prompt\n            messages = await toolkit.load_prompt(\n                \"weather_query\",\n                {\"city\": \"New York\"}\n            )\n            ```\n        \"\"\"\n        client_service = self.get_client_service()\n        return await MCPAdapterService.load_prompt_from_session(\n            client_service.client, prompt_name, arguments\n        )\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.__init__","title":"<code>__init__(**data)</code>","text":"<p>Initialize the MCP toolkit</p> <p>Initializes the appropriate client and server services based on the specified mode.</p> <p>Parameters:</p> Name Type Description Default <code>**data</code> <code>Any</code> <p>Parameters passed to the parent class constructor</p> <code>{}</code> Note <p>If the mode includes \"client\", the client service will be initialized If the mode includes \"server\", the server service will be initialized</p> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>def __init__(self, **data: Any) -&gt; None:\n    \"\"\"\n    Initialize the MCP toolkit\n\n    Initializes the appropriate client and server services based on the specified mode.\n\n    Parameters:\n        **data: Parameters passed to the parent class constructor\n\n    Note:\n        If the mode includes \"client\", the client service will be initialized\n        If the mode includes \"server\", the server service will be initialized\n    \"\"\"\n    super().__init__(**data)\n\n    # Initialize services based on mode\n    if self.mode in [\"client\", \"client_and_server\"]:\n        self.factory.init_client_service()\n\n    if self.mode in [\"server\", \"client_and_server\"]:\n        self.factory.init_server_service()\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.create_multi_server_client","title":"<code>create_multi_server_client(server_urls)</code>  <code>async</code>","text":"<p>Create multi-server MCP client</p> <p>Creates a client that connects to multiple MCP servers.</p> <p>Parameters:</p> Name Type Description Default <code>server_urls</code> <code>dict[str, str]</code> <p>Server URL dictionary, format is {\"server_name\": \"http://localhost:8000\"}</p> required <p>Returns:</p> Name Type Description <code>MultiServerMCPClient</code> <code>Any</code> <p>Multi-server client instance</p> Example <pre><code>toolkit = MCPToolkit()\n\nserver_urls = {\n    \"weather\": \"http://localhost:8000\",\n    \"news\": \"http://localhost:8001\"\n}\nmulti_client = await toolkit.create_multi_server_client(server_urls)\n\n# Connect to all servers\nawait multi_client.connect()\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>async def create_multi_server_client(self, server_urls: dict[str, str]) -&gt; Any:\n    \"\"\"\n    Create multi-server MCP client\n\n    Creates a client that connects to multiple MCP servers.\n\n    Parameters:\n        server_urls: Server URL dictionary, format is {\"server_name\": \"http://localhost:8000\"}\n\n    Returns:\n        MultiServerMCPClient: Multi-server client instance\n\n    Example:\n        ```python\n        toolkit = MCPToolkit()\n\n        server_urls = {\n            \"weather\": \"http://localhost:8000\",\n            \"news\": \"http://localhost:8001\"\n        }\n        multi_client = await toolkit.create_multi_server_client(server_urls)\n\n        # Connect to all servers\n        await multi_client.connect()\n        ```\n    \"\"\"\n    # Convert simple URL dictionary to required format\n    server_configs = {\n        name: {\"url\": url, \"transport\": \"sse\"} for name, url in server_urls.items()\n    }\n    return await MCPAdapterService.create_multi_server_client(server_configs)\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.from_api_key","title":"<code>from_api_key(api_key, **kwargs)</code>  <code>classmethod</code>","text":"<p>Create toolkit from API key</p> <p>Creates a toolkit that only contains client tools, and sets the API key.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>OpenAI API key</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>MCPToolkit</code> <code>MCPToolkit</code> <p>Toolkit instance</p> Example <pre><code>client_toolkit = MCPToolkit.from_api_key(api_key=\"sk-...\")\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>@classmethod\ndef from_api_key(cls, api_key: str, **kwargs: Any) -&gt; \"MCPToolkit\":\n    \"\"\"\n    Create toolkit from API key\n\n    Creates a toolkit that only contains client tools, and sets the API key.\n\n    Parameters:\n        api_key: OpenAI API key\n        **kwargs: Other parameters\n\n    Returns:\n        MCPToolkit: Toolkit instance\n\n    Example:\n        ```python\n        client_toolkit = MCPToolkit.from_api_key(api_key=\"sk-...\")\n        ```\n    \"\"\"\n    # Set OpenAI API key\n    from os import environ\n    environ[\"OPENAI_API_KEY\"] = api_key\n\n    # Use direct call to constructor to create instance\n    return MCPToolkit(\n        mode=\"client\",\n        api_key=api_key,\n        **kwargs\n    )\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.from_client","title":"<code>from_client()</code>  <code>classmethod</code>","text":"<p>Create toolkit from client</p> <p>Creates a toolkit that only contains client tools.</p> <p>Returns:</p> Name Type Description <code>MCPToolkit</code> <code>MCPToolkit</code> <p>Toolkit instance</p> Example <pre><code>client_toolkit = MCPToolkit.from_client()\nclient_tools = client_toolkit.get_tools()\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>@classmethod\ndef from_client(cls) -&gt; \"MCPToolkit\":\n    \"\"\"\n    Create toolkit from client\n\n    Creates a toolkit that only contains client tools.\n\n    Returns:\n        MCPToolkit: Toolkit instance\n\n    Example:\n        ```python\n        client_toolkit = MCPToolkit.from_client()\n        client_tools = client_toolkit.get_tools()\n        ```\n    \"\"\"\n    return cls(mode=\"client\")\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.from_server","title":"<code>from_server()</code>  <code>classmethod</code>","text":"<p>Create toolkit from server</p> <p>Creates a toolkit that only contains server tools.</p> <p>Returns:</p> Name Type Description <code>MCPToolkit</code> <code>MCPToolkit</code> <p>Toolkit instance</p> Example <pre><code>server_toolkit = MCPToolkit.from_server()\nserver_tools = server_toolkit.get_tools()\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>@classmethod\ndef from_server(cls) -&gt; \"MCPToolkit\":\n    \"\"\"\n    Create toolkit from server\n\n    Creates a toolkit that only contains server tools.\n\n    Returns:\n        MCPToolkit: Toolkit instance\n\n    Example:\n        ```python\n        server_toolkit = MCPToolkit.from_server()\n        server_tools = server_toolkit.get_tools()\n        ```\n    \"\"\"\n    return cls(mode=\"server\")\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.from_server_and_api_key","title":"<code>from_server_and_api_key(server_url, api_key=None, **kwargs)</code>  <code>classmethod</code>","text":"<p>Create toolkit from server and API key</p> <p>Creates a toolkit containing both server and client tools, and sets up the server and API key. This is a convenient method for creating a complete toolkit.</p> <p>Parameters:</p> Name Type Description Default <code>server_url</code> <code>str</code> <p>Server URL</p> required <code>api_key</code> <code>str | None</code> <p>OpenAI API key, optional</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>MCPToolkit</code> <code>MCPToolkit</code> <p>Toolkit instance</p> Example <pre><code># Create a toolkit with server and client\ntoolkit = MCPToolkit.from_server_and_api_key(\n    server_url=\"http://localhost:8000/sse\",\n    api_key=\"your-openai-api-key\"\n)\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>@classmethod\ndef from_server_and_api_key(cls, server_url: str, api_key: str | None = None, **kwargs: Any) -&gt; \"MCPToolkit\":\n    \"\"\"\n    Create toolkit from server and API key\n\n    Creates a toolkit containing both server and client tools, and sets up the server and API key.\n    This is a convenient method for creating a complete toolkit.\n\n    Parameters:\n        server_url: Server URL\n        api_key: OpenAI API key, optional\n        **kwargs: Other parameters\n\n    Returns:\n        MCPToolkit: Toolkit instance\n\n    Example:\n        ```python\n        # Create a toolkit with server and client\n        toolkit = MCPToolkit.from_server_and_api_key(\n            server_url=\"http://localhost:8000/sse\",\n            api_key=\"your-openai-api-key\"\n        )\n        ```\n    \"\"\"\n    # Set API key\n    if api_key:\n        from os import environ\n        environ[\"OPENAI_API_KEY\"] = api_key\n\n    # Use direct call to constructor to create instance\n    return MCPToolkit(\n        mode=\"client\",\n        server_url=server_url,\n        api_key=api_key,\n        **kwargs\n    )\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.get_client_service","title":"<code>get_client_service()</code>","text":"<p>Get the client service instance</p> <p>This method provides access to the underlying client service, allowing direct interaction with MCP servers.</p> <p>Returns:</p> Name Type Description <code>MCPClientService</code> <code>MCPClientService</code> <p>Client service instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the current mode does not support client services (i.e., mode is \"server\")</p> Example <pre><code>toolkit = MCPToolkit()\nclient_service = toolkit.get_client_service()\n\n# Create client connection\nclient_service.create(\"http://localhost:8000\", \"sse\")\nawait client_service.connect()\n\n# Call tool\nresult = await client_service.call_tool(\"default\", \"my_tool\", argument=\"value\")\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>def get_client_service(self) -&gt; MCPClientService:\n    \"\"\"\n    Get the client service instance\n\n    This method provides access to the underlying client service, allowing direct interaction with MCP servers.\n\n    Returns:\n        MCPClientService: Client service instance\n\n    Exceptions:\n        ValueError: If the current mode does not support client services (i.e., mode is \"server\")\n\n    Example:\n        ```python\n        toolkit = MCPToolkit()\n        client_service = toolkit.get_client_service()\n\n        # Create client connection\n        client_service.create(\"http://localhost:8000\", \"sse\")\n        await client_service.connect()\n\n        # Call tool\n        result = await client_service.call_tool(\"default\", \"my_tool\", argument=\"value\")\n        ```\n    \"\"\"\n    if self.mode not in [\"client\", \"client_and_server\"]:\n        raise ValueError(f\"Current mode '{self.mode}' does not support client services\")\n\n    # Ensure client_service is not None\n    if self.factory.client_service is None:\n        self.factory.init_client_service()\n    assert self.factory.client_service is not None, \"Could not initialize client service\"\n    return self.factory.client_service\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.get_langchain_tools","title":"<code>get_langchain_tools()</code>  <code>async</code>","text":"<p>Get current client service LangChain tools</p> <p>Converts MCP server tools to LangChain format tools.</p> <p>Returns:</p> Type Description <code>list[BaseTool]</code> <p>list[BaseTool]: LangChain tool list</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If mode does not support client or client is not connected</p> Example <pre><code>toolkit = MCPToolkit(mode=\"client\")\nclient_service = toolkit.get_client_service()\nclient_service.create(\"http://localhost:8000\", \"sse\")\nawait client_service.connect()\n\n# Get LangChain tools\nlc_tools = await toolkit.get_langchain_tools()\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>async def get_langchain_tools(self) -&gt; list[BaseTool]:\n    \"\"\"\n    Get current client service LangChain tools\n\n    Converts MCP server tools to LangChain format tools.\n\n    Returns:\n        list[BaseTool]: LangChain tool list\n\n    Exceptions:\n        ValueError: If mode does not support client or client is not connected\n\n    Example:\n        ```python\n        toolkit = MCPToolkit(mode=\"client\")\n        client_service = toolkit.get_client_service()\n        client_service.create(\"http://localhost:8000\", \"sse\")\n        await client_service.connect()\n\n        # Get LangChain tools\n        lc_tools = await toolkit.get_langchain_tools()\n        ```\n    \"\"\"\n    client_service = self.get_client_service()\n    return await MCPAdapterService.load_tools_from_session(client_service.client)\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.get_server_service","title":"<code>get_server_service()</code>","text":"<p>Get the server service instance</p> <p>This method provides access to the underlying server service, allowing management of MCP servers.</p> <p>Returns:</p> Name Type Description <code>MCPServerService</code> <code>MCPServerService</code> <p>Server service instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the current mode does not support server services (i.e., mode is \"client\")</p> Example <pre><code>toolkit = MCPToolkit()\nserver_service = toolkit.get_server_service()\n\n# Start server\nawait server_service.start(name=\"MyServer\", port=8000)\n\n# Add tool\ntool_code = \"def my_tool(): return 'Hello, world!'\"\nawait server_service.add_tool(\"my_tool\", \"Example tool\", tool_code)\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>def get_server_service(self) -&gt; MCPServerService:\n    \"\"\"\n    Get the server service instance\n\n    This method provides access to the underlying server service, allowing management of MCP servers.\n\n    Returns:\n        MCPServerService: Server service instance\n\n    Exceptions:\n        ValueError: If the current mode does not support server services (i.e., mode is \"client\")\n\n    Example:\n        ```python\n        toolkit = MCPToolkit()\n        server_service = toolkit.get_server_service()\n\n        # Start server\n        await server_service.start(name=\"MyServer\", port=8000)\n\n        # Add tool\n        tool_code = \"def my_tool(): return 'Hello, world!'\"\n        await server_service.add_tool(\"my_tool\", \"Example tool\", tool_code)\n        ```\n    \"\"\"\n    if self.mode not in [\"server\", \"client_and_server\"]:\n        raise ValueError(f\"Current mode '{self.mode}' does not support server services\")\n\n    # Ensure server_service is not None\n    if self.factory.server_service is None:\n        self.factory.init_server_service()\n    assert self.factory.server_service is not None, \"Could not initialize server service\"\n    return self.factory.server_service\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.get_tools","title":"<code>get_tools()</code>","text":"<p>Get all tools in the toolkit</p> <p>Returns the appropriate tool collection based on the current mode. - client mode: returns client tools - server mode: returns server tools - client_and_server mode: returns all tools</p> <p>Returns:</p> Type Description <code>list[BaseTool]</code> <p>list[BaseTool]: List of tools, can be used directly to create an Agent</p> Example <pre><code>toolkit = MCPToolkit()\ntools = toolkit.get_tools()\nagent = create_react_agent(model, tools)\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>def get_tools(self) -&gt; list[BaseTool]:\n    \"\"\"\n    Get all tools in the toolkit\n\n    Returns the appropriate tool collection based on the current mode.\n    - client mode: returns client tools\n    - server mode: returns server tools\n    - client_and_server mode: returns all tools\n\n    Returns:\n        list[BaseTool]: List of tools, can be used directly to create an Agent\n\n    Example:\n        ```python\n        toolkit = MCPToolkit()\n        tools = toolkit.get_tools()\n        agent = create_react_agent(model, tools)\n        ```\n    \"\"\"\n    if self.mode == \"client\":\n        return self.factory.create_client_tools()\n    elif self.mode == \"server\":\n        return self.factory.create_server_tools()\n    else:  # client_and_server\n        return self.factory.create_all_tools()\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.get_tools_by_names","title":"<code>get_tools_by_names(names)</code>","text":"<p>Get tools by their names</p> <p>Allows selective retrieval of specific tools from the toolkit.</p> <p>Parameters:</p> Name Type Description Default <code>names</code> <code>list[str]</code> <p>List of tool names</p> required <p>Returns:</p> Type Description <code>list[BaseTool]</code> <p>list[BaseTool]: List of tool instances</p> Example <pre><code>toolkit = MCPToolkit()\n# Only get tools for starting server and creating client\nspecific_tools = toolkit.get_tools_by_names([\"mcp_start_server\", \"mcp_create_client\"])\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>def get_tools_by_names(self, names: list[str]) -&gt; list[BaseTool]:\n    \"\"\"\n    Get tools by their names\n\n    Allows selective retrieval of specific tools from the toolkit.\n\n    Parameters:\n        names: List of tool names\n\n    Returns:\n        list[BaseTool]: List of tool instances\n\n    Example:\n        ```python\n        toolkit = MCPToolkit()\n        # Only get tools for starting server and creating client\n        specific_tools = toolkit.get_tools_by_names([\"mcp_start_server\", \"mcp_create_client\"])\n        ```\n    \"\"\"\n    return self.factory.get_tools_by_names(names)\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.get_tools_from_multiple_servers","title":"<code>get_tools_from_multiple_servers(server_urls)</code>  <code>async</code>","text":"<p>Get LangChain tools from multiple servers</p> <p>Connects to multiple MCP servers and gets tools from all servers.</p> <p>Parameters:</p> Name Type Description Default <code>server_urls</code> <code>dict[str, str]</code> <p>Server URL dictionary, format is {\"server_name\": \"http://localhost:8000\"}</p> required <p>Returns:</p> Type Description <code>list[BaseTool]</code> <p>list[BaseTool]: All server LangChain tool list</p> Example <pre><code>toolkit = MCPToolkit()\n\n# Get tools from multiple servers\nserver_urls = {\n    \"weather\": \"http://localhost:8000\",\n    \"news\": \"http://localhost:8001\"\n}\ntools = await toolkit.get_tools_from_multiple_servers(server_urls)\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>async def get_tools_from_multiple_servers(self, server_urls: dict[str, str]) -&gt; list[BaseTool]:\n    \"\"\"\n    Get LangChain tools from multiple servers\n\n    Connects to multiple MCP servers and gets tools from all servers.\n\n    Parameters:\n        server_urls: Server URL dictionary, format is {\"server_name\": \"http://localhost:8000\"}\n\n    Returns:\n        list[BaseTool]: All server LangChain tool list\n\n    Example:\n        ```python\n        toolkit = MCPToolkit()\n\n        # Get tools from multiple servers\n        server_urls = {\n            \"weather\": \"http://localhost:8000\",\n            \"news\": \"http://localhost:8001\"\n        }\n        tools = await toolkit.get_tools_from_multiple_servers(server_urls)\n        ```\n    \"\"\"\n    server_configs = {\n        name: {\"url\": url, \"transport\": \"sse\"} for name, url in server_urls.items()\n    }\n    client = await MCPAdapterService.create_multi_server_client(server_configs)\n    return await MCPAdapterService.load_tools_from_session(client)\n</code></pre>"},{"location":"api/toolkit/#langchain_mcp_toolkit.toolkit.MCPToolkit.load_prompt","title":"<code>load_prompt(prompt_name, arguments=None)</code>  <code>async</code>","text":"<p>Load MCP prompt and convert to LangChain messages</p> <p>Loads prompt from MCP server and converts it to LangChain format message list.</p> <p>Parameters:</p> Name Type Description Default <code>prompt_name</code> <code>str</code> <p>Prompt name</p> required <code>arguments</code> <code>dict[str, Any] | None</code> <p>Prompt parameters, optional</p> <code>None</code> <p>Returns:</p> Type Description <code>list[HumanMessage | AIMessage]</code> <p>list[HumanMessage | AIMessage]: LangChain message list</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If mode does not support client or client is not connected</p> Example <pre><code>toolkit = MCPToolkit(mode=\"client\")\nclient_service = toolkit.get_client_service()\nclient_service.create(\"http://localhost:8000\", \"sse\")\nawait client_service.connect()\n\n# Load prompt\nmessages = await toolkit.load_prompt(\n    \"weather_query\",\n    {\"city\": \"New York\"}\n)\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/toolkit.py</code> <pre><code>async def load_prompt(\n    self, prompt_name: str, arguments: dict[str, Any] | None = None\n) -&gt; list[HumanMessage | AIMessage]:\n    \"\"\"\n    Load MCP prompt and convert to LangChain messages\n\n    Loads prompt from MCP server and converts it to LangChain format message list.\n\n    Parameters:\n        prompt_name: Prompt name\n        arguments: Prompt parameters, optional\n\n    Returns:\n        list[HumanMessage | AIMessage]: LangChain message list\n\n    Exceptions:\n        ValueError: If mode does not support client or client is not connected\n\n    Example:\n        ```python\n        toolkit = MCPToolkit(mode=\"client\")\n        client_service = toolkit.get_client_service()\n        client_service.create(\"http://localhost:8000\", \"sse\")\n        await client_service.connect()\n\n        # Load prompt\n        messages = await toolkit.load_prompt(\n            \"weather_query\",\n            {\"city\": \"New York\"}\n        )\n        ```\n    \"\"\"\n    client_service = self.get_client_service()\n    return await MCPAdapterService.load_prompt_from_session(\n        client_service.client, prompt_name, arguments\n    )\n</code></pre>"},{"location":"api/tools/","title":"MCP Tools","text":""},{"location":"api/tools/#client-tools","title":"Client Tools","text":"<p>               Bases: <code>MCPBaseTool</code></p> <p>Create MCP Client Tool</p> <p>This tool is used to create a connection to an MCP server. Supports standard server connections (SSE) and local process connections (stdio). This tool must be called before using other client tools.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>client_service</code> <code>MCPClientService | None</code> <p>MCP client service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"client\")\ntools = toolkit.get_tools()\n\n# Use tool to create client connection\ncreate_tool = [t for t in tools if t.name == \"client_create\"][0]\nawait create_tool.invoke({\n    \"server_url\": \"http://localhost:8000\",\n    \"transport_type\": \"sse\"\n})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>class ClientCreateTool(MCPBaseTool):\n    \"\"\"\n    Create MCP Client Tool\n\n    This tool is used to create a connection to an MCP server. Supports standard server connections (SSE) and local process connections (stdio).\n    This tool must be called before using other client tools.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        client_service: MCP client service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"client\")\n        tools = toolkit.get_tools()\n\n        # Use tool to create client connection\n        create_tool = [t for t in tools if t.name == \"client_create\"][0]\n        await create_tool.invoke({\n            \"server_url\": \"http://localhost:8000\",\n            \"transport_type\": \"sse\"\n        })\n        ```\n    \"\"\"\n\n    name: str = \"client_create\"\n    description: str = \"Create an MCP client, connecting to the specified server\"\n    client_service: MCPClientService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            client_service: MCP client service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.client_service = client_service\n\n    async def _run(self, *args: Any, **kwargs: Any) -&gt; str:\n        \"\"\"Create MCP client\n\n        Args:\n            *args: Positional arguments, first argument is server_url\n            **kwargs: Keyword arguments, including transport_type\n\n        Returns:\n            str: Creation result\n\n        Raises:\n            ValueError: When client_service is not set\n        \"\"\"\n        if not self.client_service:\n            raise ValueError(\"Client service not set\")\n\n        server_url = args[0] if args else kwargs.get(\"server_url\", \"\")\n        transport_type = kwargs.get(\"transport_type\", \"stdio\")\n\n        return self.client_service.create(server_url, transport_type)\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>Call MCP Tool</p> <p>This tool is used to call tools on the MCP server, allowing specification of server name, tool name, and parameters. Client connection must be created before using this tool.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>client_service</code> <code>MCPClientService | None</code> <p>MCP client service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"client\")\ntools = toolkit.get_tools()\n\n# Use tool to call a tool on the server\ncall_tool = [t for t in tools if t.name == \"client_call_tool\"][0]\nresult = await call_tool.invoke({\n    \"server_name\": \"default\",\n    \"tool_name\": \"get_weather\",\n    \"arguments\": {\"city\": \"New York\"}\n})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>class ClientCallToolTool(MCPBaseTool):\n    \"\"\"\n    Call MCP Tool\n\n    This tool is used to call tools on the MCP server, allowing specification of server name, tool name, and parameters.\n    Client connection must be created before using this tool.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        client_service: MCP client service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"client\")\n        tools = toolkit.get_tools()\n\n        # Use tool to call a tool on the server\n        call_tool = [t for t in tools if t.name == \"client_call_tool\"][0]\n        result = await call_tool.invoke({\n            \"server_name\": \"default\",\n            \"tool_name\": \"get_weather\",\n            \"arguments\": {\"city\": \"New York\"}\n        })\n        ```\n    \"\"\"\n\n    name: str = \"client_call_tool\"\n    description: str = \"Call a tool on the MCP server\"\n    client_service: MCPClientService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            client_service: MCP client service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.client_service = client_service\n\n    async def _run(self, server_name: str, tool_name: str, arguments: dict[str, Any]) -&gt; Any:\n        \"\"\"\n        Run the tool, calling a tool on the server\n\n        Args:\n            server_name: Server name, typically \"default\" for single server\n            tool_name: Tool name\n            arguments: Tool parameter dictionary\n\n        Returns:\n            Any: Tool call result\n\n        Raises:\n            ValueError: If client service is not set\n\n        Example:\n            ```python\n            # Call weather query tool\n            result = await tool.invoke({\n                \"server_name\": \"weather_server\",\n                \"tool_name\": \"get_weather\",\n                \"arguments\": {\"city\": \"New York\", \"format\": \"concise\"}\n            })\n\n            # Call translation tool\n            result = await tool.invoke({\n                \"server_name\": \"translation_server\",\n                \"tool_name\": \"translate\",\n                \"arguments\": {\n                    \"text\": \"Hello, world!\",\n                    \"target_language\": \"Chinese\"\n                }\n            })\n            ```\n        \"\"\"\n        if self.client_service is None:\n            raise ValueError(\"Client service not set\")\n\n        return await self.client_service.call_tool(server_name, tool_name, **arguments)\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>List tools available on the MCP server</p> <p>This tool is used to get a list of all available MCP tools and their descriptions. For multi-server scenarios, you can choose whether to include server prefixes.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>client_service</code> <code>MCPClientService | None</code> <p>MCP client service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"client\")\ntools = toolkit.get_tools()\n\n# List all tools on the server\nlist_tools = [t for t in tools if t.name == \"client_list_tools\"][0]\navailable_tools = await list_tools.invoke({\n    \"include_server_prefix\": True\n})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>class ClientListToolsTool(MCPBaseTool):\n    \"\"\"\n    List tools available on the MCP server\n\n    This tool is used to get a list of all available MCP tools and their descriptions.\n    For multi-server scenarios, you can choose whether to include server prefixes.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        client_service: MCP client service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"client\")\n        tools = toolkit.get_tools()\n\n        # List all tools on the server\n        list_tools = [t for t in tools if t.name == \"client_list_tools\"][0]\n        available_tools = await list_tools.invoke({\n            \"include_server_prefix\": True\n        })\n        ```\n    \"\"\"\n\n    name: str = \"client_list_tools\"\n    description: str = \"List available tools on the MCP server\"\n    client_service: MCPClientService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            client_service: MCP client service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.client_service = client_service\n\n    async def _run(self, include_server_prefix: bool = True) -&gt; list[dict[str, str]]:\n        \"\"\"\n        Run the tool, listing tools on the MCP server\n\n        Args:\n            include_server_prefix: Whether to include server prefix in tool names for multi-server\n\n        Returns:\n            list[dict[str, str]]: List of tools with name and description\n\n        Raises:\n            ValueError: If client service is not set\n        \"\"\"\n        if self.client_service is None:\n            raise ValueError(\"Client service not set\")\n\n        tools = await self.client_service.list_tools(include_server_prefix=include_server_prefix)\n        return tools\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>List resources available on the MCP server</p> <p>This tool is used to get a list of resources of a specific type on the specified server.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>client_service</code> <code>MCPClientService | None</code> <p>MCP client service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"client\")\ntools = toolkit.get_tools()\n\n# List resources\nlist_resources = [t for t in tools if t.name == \"client_list_resources\"][0]\nresources = await list_resources.invoke({\n    \"server_name\": \"default\",\n    \"resource_type\": \"collection\"\n})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>class ClientListResourcesTool(MCPBaseTool):\n    \"\"\"\n    List resources available on the MCP server\n\n    This tool is used to get a list of resources of a specific type on the specified server.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        client_service: MCP client service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"client\")\n        tools = toolkit.get_tools()\n\n        # List resources\n        list_resources = [t for t in tools if t.name == \"client_list_resources\"][0]\n        resources = await list_resources.invoke({\n            \"server_name\": \"default\",\n            \"resource_type\": \"collection\"\n        })\n        ```\n    \"\"\"\n\n    name: str = \"client_list_resources\"\n    description: str = \"List resources on the MCP server\"\n    client_service: MCPClientService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            client_service: MCP client service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.client_service = client_service\n\n    async def _run(self, *args: Any, **kwargs: Any) -&gt; list[dict[str, Any]]:\n        \"\"\"\n        Run the tool, listing resources on the MCP server\n\n        Args:\n            *args: Positional arguments, first argument is server_name\n            **kwargs: Keyword arguments, including resource_type\n\n        Returns:\n            list[dict[str, Any]]: List of resources\n\n        Raises:\n            ValueError: If client service is not set\n        \"\"\"\n        if self.client_service is None:\n            raise ValueError(\"Client service not set\")\n\n        server_name = args[0] if args else kwargs.get(\"server_name\", \"default\")\n        return await self.client_service.list_resources(server_name)\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>Read resource from the MCP server</p> <p>This tool is used to read the content of a specific resource on the specified server.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>client_service</code> <code>MCPClientService | None</code> <p>MCP client service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"client\")\ntools = toolkit.get_tools()\n\n# Read resource\nread_resource = [t for t in tools if t.name == \"client_read_resource\"][0]\ncontent = await read_resource.invoke({\n    \"server_name\": \"default\",\n    \"resource_type\": \"collection\",\n    \"resource_id\": \"cities\"\n})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>class ClientReadResourceTool(MCPBaseTool):\n    \"\"\"\n    Read resource from the MCP server\n\n    This tool is used to read the content of a specific resource on the specified server.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        client_service: MCP client service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"client\")\n        tools = toolkit.get_tools()\n\n        # Read resource\n        read_resource = [t for t in tools if t.name == \"client_read_resource\"][0]\n        content = await read_resource.invoke({\n            \"server_name\": \"default\",\n            \"resource_type\": \"collection\",\n            \"resource_id\": \"cities\"\n        })\n        ```\n    \"\"\"\n\n    name: str = \"client_read_resource\"\n    description: str = \"Read resource from the MCP server\"\n    client_service: MCPClientService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            client_service: MCP client service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.client_service = client_service\n\n    async def _run(self, resource_name: str, server_name: str = \"\") -&gt; dict[str, Any]:\n        \"\"\"\n        Run the tool, read a resource from the MCP server\n\n        Args:\n            resource_name: Resource name\n            server_name: Server name, defaults to empty string\n\n        Returns:\n            dict: Resource content\n\n        Raises:\n            ValueError: If client service is not set\n\n        Example:\n            ```python\n            resource = await tool.invoke({\n                \"resource_name\": \"cities\",\n                \"server_name\": \"default\"\n            })\n            print(resource)  # Output: {\"content\": [\"New York\", \"Los Angeles\", \"Chicago\", ...]}\n            ```\n        \"\"\"\n        if self.client_service is None:\n            raise ValueError(\"Client service not set\")\n\n        return await self.client_service.read_resource(server_name, resource_name)\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>List prompts available on the MCP server</p> <p>This tool is used to get a list of all available prompt templates on the specified server.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>client_service</code> <code>MCPClientService | None</code> <p>MCP client service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"client\")\ntools = toolkit.get_tools()\n\n# List prompts\nlist_prompts = [t for t in tools if t.name == \"client_list_prompts\"][0]\nprompts = await list_prompts.invoke({\n    \"server_name\": \"default\"\n})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>class ClientListPromptsTool(MCPBaseTool):\n    \"\"\"\n    List prompts available on the MCP server\n\n    This tool is used to get a list of all available prompt templates on the specified server.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        client_service: MCP client service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"client\")\n        tools = toolkit.get_tools()\n\n        # List prompts\n        list_prompts = [t for t in tools if t.name == \"client_list_prompts\"][0]\n        prompts = await list_prompts.invoke({\n            \"server_name\": \"default\"\n        })\n        ```\n    \"\"\"\n\n    name: str = \"client_list_prompts\"\n    description: str = \"List available prompts on the MCP server\"\n    client_service: MCPClientService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            client_service: MCP client service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.client_service = client_service\n\n    async def _run(self, server_name: str) -&gt; list[dict[str, Any]]:\n        \"\"\"\n        Run the tool, listing prompts on the MCP server\n\n        Args:\n            server_name: Server name\n\n        Returns:\n            list[dict[str, Any]]: List of prompts\n\n        Raises:\n            ValueError: If client service is not set\n        \"\"\"\n        if self.client_service is None:\n            raise ValueError(\"Client service not set\")\n\n        return await self.client_service.list_prompts(server_name)\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>Get prompt from the MCP server</p> <p>This tool is used to get the content of a specific prompt on the specified server.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>client_service</code> <code>MCPClientService | None</code> <p>MCP client service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"client\")\ntools = toolkit.get_tools()\n\n# Get prompt\nget_prompt = [t for t in tools if t.name == \"client_get_prompt\"][0]\nprompt = await get_prompt.invoke({\n    \"server_name\": \"default\",\n    \"prompt_name\": \"greeting\"\n})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>class ClientGetPromptTool(MCPBaseTool):\n    \"\"\"\n    Get prompt from the MCP server\n\n    This tool is used to get the content of a specific prompt on the specified server.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        client_service: MCP client service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"client\")\n        tools = toolkit.get_tools()\n\n        # Get prompt\n        get_prompt = [t for t in tools if t.name == \"client_get_prompt\"][0]\n        prompt = await get_prompt.invoke({\n            \"server_name\": \"default\",\n            \"prompt_name\": \"greeting\"\n        })\n        ```\n    \"\"\"\n\n    name: str = \"client_get_prompt\"\n    description: str = \"Get prompt from the MCP server\"\n    client_service: MCPClientService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            client_service: MCP client service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.client_service = client_service\n\n    async def _run(self, server_name: str, prompt_name: str) -&gt; Any:\n        \"\"\"\n        Run the tool, getting prompt from the MCP server\n\n        Args:\n            server_name: Server name\n            prompt_name: Prompt name\n\n        Returns:\n            Any: Prompt content\n\n        Raises:\n            ValueError: If client service is not set\n        \"\"\"\n        if self.client_service is None:\n            raise ValueError(\"Client service not set\")\n\n        # Default arguments - empty dictionary\n        arguments = {}\n        return await self.client_service.get_prompt(prompt_name, arguments, server_name)\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>Get LangChain Tools</p> <p>This tool is used to convert tools on the MCP server to LangChain format tools, for easy use within the LangChain framework.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>client_service</code> <code>MCPClientService | None</code> <p>MCP client service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\nfrom langchain.agents import create_react_agent\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"client\")\ntools = toolkit.get_tools()\n\n# Get LangChain tools\nget_lc_tools = [t for t in tools if t.name == \"get_langchain_tools\"][0]\nlc_tools = await get_lc_tools.invoke()\n\n# Create Agent with LangChain tools\nagent = create_react_agent(model, lc_tools)\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>class GetLangChainToolsTool(MCPBaseTool):\n    \"\"\"\n    Get LangChain Tools\n\n    This tool is used to convert tools on the MCP server to LangChain format tools,\n    for easy use within the LangChain framework.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        client_service: MCP client service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n        from langchain.agents import create_react_agent\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"client\")\n        tools = toolkit.get_tools()\n\n        # Get LangChain tools\n        get_lc_tools = [t for t in tools if t.name == \"get_langchain_tools\"][0]\n        lc_tools = await get_lc_tools.invoke()\n\n        # Create Agent with LangChain tools\n        agent = create_react_agent(model, lc_tools)\n        ```\n    \"\"\"\n\n    name: str = \"get_langchain_tools\"\n    description: str = \"Get LangChain tools from the MCP server\"\n    client_service: MCPClientService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            client_service: MCP client service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.client_service = client_service\n\n    async def _run(self) -&gt; list[BaseTool]:\n        \"\"\"\n        Run the tool, getting LangChain tools from the MCP server\n\n        Returns:\n            list[BaseTool]: List of LangChain tools\n\n        Raises:\n            ValueError: If client service is not set\n        \"\"\"\n        if self.client_service is None:\n            raise ValueError(\"Client service not set\")\n\n        return await self.client_service.get_langchain_tools()\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>Get LangChain Prompt</p> <p>This tool is used to convert prompts on the MCP server to LangChain format prompts, for easy use within the LangChain framework. Supports providing parameters to fill prompt templates.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>client_service</code> <code>MCPClientService | None</code> <p>MCP client service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"client\")\ntools = toolkit.get_tools()\n\n# Get LangChain prompt\nget_lc_prompt = [t for t in tools if t.name == \"get_langchain_prompt\"][0]\nmessages = await get_lc_prompt.invoke({\n    \"server_name\": \"default\",\n    \"prompt_name\": \"weather_query\",\n    \"arguments\": {\"city\": \"New York\"}\n})\n\n# Use prompt\nresponse = await llm.ainvoke(messages)\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>class GetLangChainPromptTool(MCPBaseTool):\n    \"\"\"\n    Get LangChain Prompt\n\n    This tool is used to convert prompts on the MCP server to LangChain format prompts,\n    for easy use within the LangChain framework. Supports providing parameters to fill prompt templates.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        client_service: MCP client service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"client\")\n        tools = toolkit.get_tools()\n\n        # Get LangChain prompt\n        get_lc_prompt = [t for t in tools if t.name == \"get_langchain_prompt\"][0]\n        messages = await get_lc_prompt.invoke({\n            \"server_name\": \"default\",\n            \"prompt_name\": \"weather_query\",\n            \"arguments\": {\"city\": \"New York\"}\n        })\n\n        # Use prompt\n        response = await llm.ainvoke(messages)\n        ```\n    \"\"\"\n\n    name: str = \"get_langchain_prompt\"\n    description: str = \"Get LangChain prompt from the MCP server\"\n    client_service: MCPClientService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            client_service: MCP client service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.client_service = client_service\n\n    async def _run(\n        self,\n        server_name: str,\n        prompt_name: str,\n        arguments: dict[str, Any] | None = None,\n    ) -&gt; list[BaseMessage]:\n        \"\"\"\n        Run the tool, getting LangChain prompt from the MCP server\n\n        Args:\n            server_name: Server name\n            prompt_name: Prompt name\n            arguments: Prompt arguments for template variables\n\n        Returns:\n            list[BaseMessage]: List of LangChain messages\n\n        Raises:\n            ValueError: If client service is not set\n        \"\"\"\n        if self.client_service is None:\n            raise ValueError(\"Client service not set\")\n\n        args = arguments or {}\n        return await self.client_service.get_langchain_prompt(prompt_name, args, server_name)\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.client_tools.ClientCreateTool.__init__","title":"<code>__init__(client_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>client_service</code> <code>MCPClientService</code> <p>MCP client service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        client_service: MCP client service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.client_service = client_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.client_tools.ClientCallToolTool.__init__","title":"<code>__init__(client_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>client_service</code> <code>MCPClientService</code> <p>MCP client service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        client_service: MCP client service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.client_service = client_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.client_tools.ClientListToolsTool.__init__","title":"<code>__init__(client_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>client_service</code> <code>MCPClientService</code> <p>MCP client service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        client_service: MCP client service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.client_service = client_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.client_tools.ClientListResourcesTool.__init__","title":"<code>__init__(client_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>client_service</code> <code>MCPClientService</code> <p>MCP client service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        client_service: MCP client service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.client_service = client_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.client_tools.ClientReadResourceTool.__init__","title":"<code>__init__(client_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>client_service</code> <code>MCPClientService</code> <p>MCP client service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        client_service: MCP client service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.client_service = client_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.client_tools.ClientListPromptsTool.__init__","title":"<code>__init__(client_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>client_service</code> <code>MCPClientService</code> <p>MCP client service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        client_service: MCP client service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.client_service = client_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.client_tools.ClientGetPromptTool.__init__","title":"<code>__init__(client_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>client_service</code> <code>MCPClientService</code> <p>MCP client service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        client_service: MCP client service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.client_service = client_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.client_tools.GetLangChainToolsTool.__init__","title":"<code>__init__(client_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>client_service</code> <code>MCPClientService</code> <p>MCP client service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        client_service: MCP client service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.client_service = client_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.client_tools.GetLangChainPromptTool.__init__","title":"<code>__init__(client_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>client_service</code> <code>MCPClientService</code> <p>MCP client service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/client_tools.py</code> <pre><code>def __init__(self, client_service: MCPClientService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        client_service: MCP client service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.client_service = client_service\n</code></pre>"},{"location":"api/tools/#server-tools","title":"Server Tools","text":"<p>               Bases: <code>MCPBaseTool</code></p> <p>Start MCP Server Tool</p> <p>This tool is used to start an MCP server on the specified host and port.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>args_schema</code> <code>type[BaseModel]</code> <p>Parameter schema</p> <code>server_service</code> <code>MCPServerService | None</code> <p>MCP server service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"server\")\ntools = toolkit.get_tools()\n\n# Start server\nstart_tool = [t for t in tools if t.name == \"server_start\"][0]\nurl = await start_tool.invoke({\n    \"host\": \"localhost\",\n    \"port\": 8000\n})\nprint(url)  # Output: Server started at http://localhost:8000\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>class ServerStartTool(MCPBaseTool):\n    \"\"\"\n    Start MCP Server Tool\n\n    This tool is used to start an MCP server on the specified host and port.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        args_schema: Parameter schema\n        server_service: MCP server service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"server\")\n        tools = toolkit.get_tools()\n\n        # Start server\n        start_tool = [t for t in tools if t.name == \"server_start\"][0]\n        url = await start_tool.invoke({\n            \"host\": \"localhost\",\n            \"port\": 8000\n        })\n        print(url)  # Output: Server started at http://localhost:8000\n        ```\n    \"\"\"\n\n    name: str = \"server_start\"\n    description: str = START_SERVER_PROMPT\n    args_schema: type[BaseModel] = ServerConfig\n    server_service: MCPServerService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            server_service: MCP server service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.server_service = server_service\n\n    async def _run(self, host: str = \"localhost\", port: int = 8000) -&gt; str:\n        \"\"\"\n        Run the tool, start MCP server\n\n        Args:\n            host: Server host address, defaults to \"localhost\"\n            port: Server port, defaults to 8000\n\n        Returns:\n            str: Operation result message\n\n        Raises:\n            ValueError: If server service is not set\n\n        Example:\n            ```python\n            # Start server with default parameters\n            url = await tool.invoke()\n            # Output: Server started at http://localhost:8000\n\n            # Start server with specific host and port\n            url = await tool.invoke({\n                \"host\": \"0.0.0.0\",  # Allow external access\n                \"port\": 8888\n            })\n            # Output: Server started at http://0.0.0.0:8888\n            ```\n        \"\"\"\n        if self.server_service is None:\n            raise ValueError(\"Server service not set\")\n\n        return await self.server_service.async_start_server(host, port)\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>Stop MCP Server Tool</p> <p>This tool is used to stop the currently running MCP server.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>args_schema</code> <code>type[BaseModel]</code> <p>Parameter schema</p> <code>server_service</code> <code>MCPServerService | None</code> <p>MCP server service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"server\")\ntools = toolkit.get_tools()\n\n# Stop server\nstop_tool = [t for t in tools if t.name == \"server_stop\"][0]\nresult = await stop_tool.invoke()\nprint(result)  # Output: Server stopped\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>class ServerStopTool(MCPBaseTool):\n    \"\"\"\n    Stop MCP Server Tool\n\n    This tool is used to stop the currently running MCP server.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        args_schema: Parameter schema\n        server_service: MCP server service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"server\")\n        tools = toolkit.get_tools()\n\n        # Stop server\n        stop_tool = [t for t in tools if t.name == \"server_stop\"][0]\n        result = await stop_tool.invoke()\n        print(result)  # Output: Server stopped\n        ```\n    \"\"\"\n\n    name: str = \"server_stop\"\n    description: str = STOP_SERVER_PROMPT\n    args_schema: type[BaseModel] = NoInput\n    server_service: MCPServerService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            server_service: MCP server service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.server_service = server_service\n\n    async def _run(self) -&gt; str:\n        \"\"\"\n        Run the tool, stop MCP server\n\n        Returns:\n            str: Operation result message\n\n        Raises:\n            ValueError: If server service is not set\n\n        Example:\n            ```python\n            # Stop server\n            result = await tool.invoke()\n            # Output: Server stopped\n\n            # If server is not running\n            result = await tool.invoke()\n            # Output: Server not currently running\n            ```\n        \"\"\"\n        if self.server_service is None:\n            raise ValueError(\"Server service not set\")\n\n        return await self.server_service.async_stop_server()\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>Get MCP Server URL Tool</p> <p>This tool is used to get the URL of the currently running MCP server.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>args_schema</code> <code>type[BaseModel]</code> <p>Parameter schema</p> <code>server_service</code> <code>MCPServerService | None</code> <p>MCP server service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"server\")\ntools = toolkit.get_tools()\n\n# Get server URL\nget_url_tool = [t for t in tools if t.name == \"server_get_url\"][0]\nurl = await get_url_tool.invoke()\nprint(url)  # Output: http://localhost:8000\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>class ServerGetUrlTool(MCPBaseTool):\n    \"\"\"\n    Get MCP Server URL Tool\n\n    This tool is used to get the URL of the currently running MCP server.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        args_schema: Parameter schema\n        server_service: MCP server service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"server\")\n        tools = toolkit.get_tools()\n\n        # Get server URL\n        get_url_tool = [t for t in tools if t.name == \"server_get_url\"][0]\n        url = await get_url_tool.invoke()\n        print(url)  # Output: http://localhost:8000\n        ```\n    \"\"\"\n\n    name: str = \"server_get_url\"\n    description: str = GET_SERVER_URL_PROMPT\n    args_schema: type[BaseModel] = NoInput\n    server_service: MCPServerService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            server_service: MCP server service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.server_service = server_service\n\n    async def _run(self) -&gt; str:\n        \"\"\"\n        Run the tool, get MCP server URL\n\n        Returns:\n            str: Server URL or status message\n\n        Raises:\n            ValueError: If server service is not set\n\n        Example:\n            ```python\n            # Get server URL\n            url = await tool.invoke()\n            # Output: http://localhost:8000\n\n            # If server is not running\n            url = await tool.invoke()\n            # Output: Server not currently running\n            ```\n        \"\"\"\n        if self.server_service is None:\n            raise ValueError(\"Server service not set\")\n\n        return await self.server_service.async_get_url()\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>Add Tool to MCP Server</p> <p>This tool is used to dynamically add new tools to the MCP server. Tool code will be executed in a secure sandbox.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>args_schema</code> <code>type[BaseModel]</code> <p>Parameter schema</p> <code>server_service</code> <code>MCPServerService | None</code> <p>MCP server service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"server\")\ntools = toolkit.get_tools()\n\n# Add tool\nadd_tool = [t for t in tools if t.name == \"server_add_tool\"][0]\nresult = await add_tool.invoke({\n    \"name\": \"get_weather\",\n    \"description\": \"Get city weather\",\n    \"code\": \"return f'Today in {kwargs.get(\"city\")} the weather is sunny, 25\u00b0C'\"\n})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>class ServerAddToolTool(MCPBaseTool):\n    \"\"\"\n    Add Tool to MCP Server\n\n    This tool is used to dynamically add new tools to the MCP server. Tool code will be executed in a secure sandbox.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        args_schema: Parameter schema\n        server_service: MCP server service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"server\")\n        tools = toolkit.get_tools()\n\n        # Add tool\n        add_tool = [t for t in tools if t.name == \"server_add_tool\"][0]\n        result = await add_tool.invoke({\n            \"name\": \"get_weather\",\n            \"description\": \"Get city weather\",\n            \"code\": \"return f'Today in {kwargs.get(\\\"city\\\")} the weather is sunny, 25\u00b0C'\"\n        })\n        ```\n    \"\"\"\n\n    name: str = \"server_add_tool\"\n    description: str = ADD_TOOL_PROMPT\n    args_schema: type[BaseModel] = ToolDefinition\n    server_service: MCPServerService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            server_service: MCP server service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.server_service = server_service\n\n    async def _run(self, name: str, description: str, code: str, code_type: str = \"python\") -&gt; str:\n        \"\"\"\n        Run the tool, add tool to MCP server\n\n        Args:\n            name: Tool name\n            description: Tool description\n            code: Tool code\n            code_type: Code type, defaults to \"python\"\n\n        Returns:\n            str: Operation result message\n\n        Raises:\n            ValueError: If server service is not set\n\n        Example:\n            ```python\n            # Add a simple calculator tool\n            result = await tool.invoke({\n                \"name\": \"add_numbers\",\n                \"description\": \"Add two numbers\",\n                \"code\": \"return kwargs.get('a', 0) + kwargs.get('b', 0)\"\n            })\n\n            # Add a more complex tool with external library\n            result = await tool.invoke({\n                \"name\": \"get_weather\",\n                \"description\": \"Get weather for a city\",\n                \"code\": \"def get_weather(**kwargs):\\n    import requests\\n    city = kwargs.get('city', 'New York')\\n    api_key = 'demo_key'\\n    url = f'https://api.example.com/weather?q={city}&amp;appid={api_key}'\\n\\n    try:\\n        response = requests.get(url)\\n        data = response.json()\\n        temp = data['main']['temp']\\n        conditions = data['weather'][0]['description']\\n        return f'Weather in {city}: {temp}\u00b0C, {conditions}'\\n    except Exception as e:\\n        return f'Error getting weather: {str(e)}'\"\n            })\n            ```\n        \"\"\"\n        if self.server_service is None:\n            raise ValueError(\"Server service not set\")\n\n        return await self.server_service.async_add_tool(name, description, code, code_type)\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>Add Resource to MCP Server</p> <p>This tool is used to add various types of resources to the MCP server, such as strings, dictionaries, or lists.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>args_schema</code> <code>type[BaseModel]</code> <p>Parameter schema</p> <code>server_service</code> <code>MCPServerService | None</code> <p>MCP server service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"server\")\ntools = toolkit.get_tools()\n\n# Add resource\nadd_resource = [t for t in tools if t.name == \"server_add_resource\"][0]\nresult = await add_resource.invoke({\n    \"name\": \"cities\",\n    \"content\": [\"New York\", \"Los Angeles\", \"Chicago\", \"San Francisco\"],\n    \"description\": \"Major US cities\"\n})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>class ServerAddResourceTool(MCPBaseTool):\n    \"\"\"\n    Add Resource to MCP Server\n\n    This tool is used to add various types of resources to the MCP server, such as strings, dictionaries, or lists.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        args_schema: Parameter schema\n        server_service: MCP server service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"server\")\n        tools = toolkit.get_tools()\n\n        # Add resource\n        add_resource = [t for t in tools if t.name == \"server_add_resource\"][0]\n        result = await add_resource.invoke({\n            \"name\": \"cities\",\n            \"content\": [\"New York\", \"Los Angeles\", \"Chicago\", \"San Francisco\"],\n            \"description\": \"Major US cities\"\n        })\n        ```\n    \"\"\"\n\n    name: str = \"server_add_resource\"\n    description: str = ADD_RESOURCE_PROMPT\n    args_schema: type[BaseModel] = ResourceDefinition\n    server_service: MCPServerService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            server_service: MCP server service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.server_service = server_service\n\n    async def _run(\n        self, name: str, content: str | dict[str, Any] | list[Any], description: str = \"\"\n    ) -&gt; str:\n        \"\"\"\n        Run the tool, add resource to MCP server\n\n        Args:\n            name: Resource name\n            content: Resource content (string, dictionary, or list)\n            description: Resource description, defaults to empty string\n\n        Returns:\n            str: Operation result message\n\n        Raises:\n            ValueError: If server service is not set\n\n        Example:\n            ```python\n            # Add string resource\n            result = await tool.invoke({\n                \"name\": \"greeting_template\",\n                \"content\": \"Hello, {name}! Welcome to our service.\",\n                \"description\": \"Greeting template with name placeholder\"\n            })\n\n            # Add dictionary resource\n            result = await tool.invoke({\n                \"name\": \"country_codes\",\n                \"content\": {\n                    \"US\": \"United States\",\n                    \"UK\": \"United Kingdom\",\n                    \"CA\": \"Canada\",\n                    \"AU\": \"Australia\"\n                },\n                \"description\": \"Country codes and names\"\n            })\n\n            # Add list resource\n            result = await tool.invoke({\n                \"name\": \"colors\",\n                \"content\": [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"],\n                \"description\": \"List of basic colors\"\n            })\n            ```\n        \"\"\"\n        if self.server_service is None:\n            raise ValueError(\"Server service not set\")\n\n        return await self.server_service.async_add_resource(name, content, description)\n</code></pre> <p>               Bases: <code>MCPBaseTool</code></p> <p>Add Prompt to MCP Server</p> <p>This tool is used to add prompt templates to the MCP server, which can be used for text generation or building conversations.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> <code>args_schema</code> <code>type[BaseModel]</code> <p>Parameter schema</p> <code>server_service</code> <code>MCPServerService | None</code> <p>MCP server service instance</p> Example <pre><code>from langchain_mcp_toolkit import MCPToolkit\n\n# Get toolkit\ntoolkit = MCPToolkit(mode=\"server\")\ntools = toolkit.get_tools()\n\n# Add prompt\nadd_prompt = [t for t in tools if t.name == \"server_add_prompt\"][0]\nresult = await add_prompt.invoke({\n    \"name\": \"weather_query\",\n    \"content\": \"Please check the weather in {city}\"\n})\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>class ServerAddPromptTool(MCPBaseTool):\n    \"\"\"\n    Add Prompt to MCP Server\n\n    This tool is used to add prompt templates to the MCP server, which can be used for text generation or building conversations.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n        args_schema: Parameter schema\n        server_service: MCP server service instance\n\n    Example:\n        ```python\n        from langchain_mcp_toolkit import MCPToolkit\n\n        # Get toolkit\n        toolkit = MCPToolkit(mode=\"server\")\n        tools = toolkit.get_tools()\n\n        # Add prompt\n        add_prompt = [t for t in tools if t.name == \"server_add_prompt\"][0]\n        result = await add_prompt.invoke({\n            \"name\": \"weather_query\",\n            \"content\": \"Please check the weather in {city}\"\n        })\n        ```\n    \"\"\"\n\n    name: str = \"server_add_prompt\"\n    description: str = ADD_PROMPT_PROMPT\n    args_schema: type[BaseModel] = PromptDefinition\n    server_service: MCPServerService | None = Field(default=None, exclude=True)\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n        \"\"\"\n        Initialize the tool\n\n        Args:\n            server_service: MCP server service instance\n            **kwargs: Other parameters\n        \"\"\"\n        super().__init__(**kwargs)\n        self.server_service = server_service\n\n    async def _run(self, name: str, content: str) -&gt; str:\n        \"\"\"\n        Run the tool, add prompt to MCP server\n\n        Args:\n            name: Prompt name\n            content: Prompt content with optional template variables in {variable} format\n\n        Returns:\n            str: Operation result message\n\n        Raises:\n            ValueError: If server service is not set\n\n        Example:\n            ```python\n            # Add a simple greeting prompt\n            result = await tool.invoke({\n                \"name\": \"greeting\",\n                \"content\": \"Hello, {name}! How can I help you today?\"\n            })\n\n            # Add a more complex prompt\n            result = await tool.invoke({\n                \"name\": \"travel_itinerary\",\n                \"content\": \"Please create a {duration} day travel itinerary for {destination}. Include recommended activities, restaurants, and accommodations.\"\n            })\n\n            # Add a multi-message conversation prompt\n            result = await tool.invoke({\n                \"name\": \"weather_conversation\",\n                \"content\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful weather assistant.\"},\n                    {\"role\": \"user\", \"content\": \"What's the weather like in {city}?\"},\n                    {\"role\": \"assistant\", \"content\": \"Let me check the weather in {city} for you.\"}\n                ]\n            })\n            ```\n        \"\"\"\n        if self.server_service is None:\n            raise ValueError(\"Server service not set\")\n\n        return await self.server_service.async_add_prompt(name, content)\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.server_tools.ServerStartTool.__init__","title":"<code>__init__(server_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>server_service</code> <code>MCPServerService</code> <p>MCP server service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        server_service: MCP server service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.server_service = server_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.server_tools.ServerStopTool.__init__","title":"<code>__init__(server_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>server_service</code> <code>MCPServerService</code> <p>MCP server service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        server_service: MCP server service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.server_service = server_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.server_tools.ServerGetUrlTool.__init__","title":"<code>__init__(server_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>server_service</code> <code>MCPServerService</code> <p>MCP server service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        server_service: MCP server service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.server_service = server_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.server_tools.ServerAddToolTool.__init__","title":"<code>__init__(server_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>server_service</code> <code>MCPServerService</code> <p>MCP server service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        server_service: MCP server service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.server_service = server_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.server_tools.ServerAddResourceTool.__init__","title":"<code>__init__(server_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>server_service</code> <code>MCPServerService</code> <p>MCP server service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        server_service: MCP server service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.server_service = server_service\n</code></pre>"},{"location":"api/tools/#langchain_mcp_toolkit.tools.server_tools.ServerAddPromptTool.__init__","title":"<code>__init__(server_service, **kwargs)</code>","text":"<p>Initialize the tool</p> <p>Parameters:</p> Name Type Description Default <code>server_service</code> <code>MCPServerService</code> <p>MCP server service instance</p> required <code>**kwargs</code> <code>Any</code> <p>Other parameters</p> <code>{}</code> Source code in <code>src/langchain_mcp_toolkit/tools/server_tools.py</code> <pre><code>def __init__(self, server_service: MCPServerService, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Initialize the tool\n\n    Args:\n        server_service: MCP server service instance\n        **kwargs: Other parameters\n    \"\"\"\n    super().__init__(**kwargs)\n    self.server_service = server_service\n</code></pre>"},{"location":"api/tools/#base-tool","title":"Base Tool","text":"<p>               Bases: <code>BaseTool</code></p> <p>MCP Base Tool Class</p> <p>Base class for all MCP tools, inherits from LangChain's BaseTool, providing unified interface and behavior. Subclasses need to implement the _run method to provide specific functionality. This class runs asynchronously by default, the _arun method will automatically call the _run method.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Tool name</p> <code>description</code> <code>str</code> <p>Tool description</p> Example <pre><code># Define a simple MCP tool\nclass MyMCPTool(MCPBaseTool):\n    name = \"my_tool\"\n    description = \"This is an example tool\"\n\n    async def _run(self, query: str) -&gt; str:\n        return f\"Processing query: {query}\"\n\n# Use the tool\nmy_tool = MyMCPTool()\nresult = await my_tool.invoke({\"query\": \"Test query\"})\nprint(result)  # Output: Processing query: Test query\n</code></pre> Source code in <code>src/langchain_mcp_toolkit/tools/base.py</code> <pre><code>class MCPBaseTool(BaseTool):\n    \"\"\"\n    MCP Base Tool Class\n\n    Base class for all MCP tools, inherits from LangChain's BaseTool, providing unified interface and behavior.\n    Subclasses need to implement the _run method to provide specific functionality. This class runs asynchronously by default,\n    the _arun method will automatically call the _run method.\n\n    Attributes:\n        name: Tool name\n        description: Tool description\n\n    Example:\n        ```python\n        # Define a simple MCP tool\n        class MyMCPTool(MCPBaseTool):\n            name = \"my_tool\"\n            description = \"This is an example tool\"\n\n            async def _run(self, query: str) -&gt; str:\n                return f\"Processing query: {query}\"\n\n        # Use the tool\n        my_tool = MyMCPTool()\n        result = await my_tool.invoke({\"query\": \"Test query\"})\n        print(result)  # Output: Processing query: Test query\n        ```\n    \"\"\"\n\n    name: str = \"\"\n    description: str = \"\"\n\n    async def _run(self, *args: Any, **kwargs: Any) -&gt; Any:\n        \"\"\"\n        Abstract method to run the tool, must be overridden by subclasses\n\n        This is the core method of the tool, all subclasses must implement this method to provide specific functionality.\n\n        Parameters:\n            *args: Positional arguments\n            **kwargs: Keyword arguments\n\n        Returns:\n            Any: Result of the tool execution\n\n        Exceptions:\n            NotImplementedError: If the subclass does not implement this method\n\n        Example:\n            ```python\n            # Implement _run method in subclass\n            async def _run(self, text: str) -&gt; str:\n                # Process input and return result\n                return f\"Tool processing result: {text.upper()}\"\n            ```\n        \"\"\"\n        raise NotImplementedError(\"Subclasses must implement the _run method\")\n\n    async def _arun(self, *args: Any, **kwargs: Any) -&gt; Any:\n        \"\"\"\n        Method to run the tool asynchronously\n\n        This method is already implemented and will automatically call the _run method. Usually, you don't need to override this method in subclasses.\n\n        Parameters:\n            *args: Positional arguments\n            **kwargs: Keyword arguments\n\n        Returns:\n            Any: Result of the tool execution\n\n        Example:\n            ```python\n            # Usually no need to override this method\n            # Will be used automatically when calling the tool\n            result = await tool.arun(text=\"hello\")\n            ```\n        \"\"\"\n        return await self._run(*args, **kwargs)\n</code></pre>"}]}